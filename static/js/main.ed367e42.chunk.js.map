{"version":3,"sources":["components/logo.svg","components/tools/GalleryCard.js","components/views/LandingPage/Sections/BigGalleryList.js","components/tools/fbase.js","components/views/LandingPage/Sections/QnACard.js","components/views/LandingPage/Sections/InformationCard.js","components/views/LandingPage/Sections/CollectionCard.js","components/tools/types.js","components/views/LandingPage/LandingPage.js","components/tools/OneCollection.js","components/views/GalleryPage/Sections/CollectionList.js","components/tools/CommentContainer.js","components/views/GalleryPage/GalleryPage.js","components/views/NavBar/Sections/SideBarData.js","components/views/NavBar/NavBar.js","components/views/ProfilePage/Sections/MakeGallery.js","components/views/ProfilePage/ProfilePage.js","components/views/UploadPage/UploadPage.js","components/views/UploadPage/InformationUpload.js","components/views/UploadPage/QnAUpload.js","components/views/InformationPage/QnAPage.js","components/views/InformationPage/InformationPage.js","components/views/CollectionPage/CollectionPage.js","components/views/LikePage/LikePage.js","components/views/AllPages/AllCollections.js","components/views/AllPages/AllGalleries.js","components/views/AllPages/AllQnAs.js","components/views/AllPages/AllInformations.js","components/Router.js","components/App.js","reportWebVitals.js","index.js"],"names":["GalleryCard","data","className","style","background","color","to","pathname","id","state","typess","map","item","index","galleryName","displayName","collection_num","gallery","title","owner","nums","BigGalleryList","app","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firebaseInstance","authService","auth","dbService","firestore","stService","storage","QnACard","fontSize","marginLeft","type","category","comment_num","InformationCard","like_num","CollectionCard","attachmentURL","src","display","typeSelect","value","label","types","categories","categorieslist","position","top","left","transform","width","bgcolor","borderRadius","border","boxShadow","p","LandingPage","isLoggedIn","useState","galleries","setGalleries","collections","setCollections","qnas","setQnas","informations","setInformations","setType","open","setOpen","loading","setLoading","handleClose","onSocialClick","e","a","provider","GoogleAuthProvider","signInWithPopup","getAllCollections","collection","orderBy","limit","get","galleryDatas","galleryData","docs","doc","filter","includes","slice","getRealAllCollections","collectionDatas","collectionData","where","getAllInformations","infoDatas","infoData","getAllQnAs","qnaDatas","qnaData","useEffect","galleryTable","qnaTable","informationTable","typeTable","backColor","backgroundColor","Button","onClick","collectionTable","right","Modal","onClose","Box","sx","justifyContent","alignItems","fontFamily","height","OneCollection","isOwner","isEditing","onClickDelete","window","confirm","creatorId","dbgallery","dbgal","gal_id","update","delete","refFromURL","alert","CollectionList","User","mainColor","currentUser","uid","CommentContainer","contentId","contentLikeNum","userId","setUpdate","comment","setComment","comments","setComments","getThisComments","dbcomments","uploadComment","getCommenterGalleryId","usersId","galleryColor","commentOne","collectionId","created","Date","now","galleryId","length","add","then","docRef","console","log","informationId","qnaId","likeComment","dbLike","db_like","likeOne","deleteComment","dbGallery","result","commentTable","dateResult","date","day","getDate","month","getMonth","hour","getHours","likeColor","margin","marginTop","paddingLeft","onChange","currentTarget","placeholder","GalleryPage","props","targets","useRef","setItem","setNow","setIsEditing","editOpen","getThisCollections","dbcollections","getThisGallery","match","params","snapshot","addLike","ok","left_color","right_color","s","tyle","desc","ref","size","current","scrollIntoView","behavior","SideBarData","path","icon","cName","NavBar","userObj","sidebar","setSidebar","handleOpen","showSidebar","signOut","fontWeight","href","target","animatedComponents","makeAnimated","MakeGallery","history","useHistory","setGalleryName","setTypess","setColor","setDesc","setChosenEmoji","showemoji","setShowemoji","submitGallery","preventDefault","galleryOne","go","onSubmit","onEmojiClick","event","emojiObject","emoji","disableAutoFocus","groupNames","smileys_people","native","autoSize","minRows","maxRows","closeMenuOnSelect","components","options","tts","forEach","i","push","isMulti","ProfilePage","userName","setUserName","galleryDesc","setGalleryDesc","setGalleryColor","galleryLeftColor","setGalleryLeftColor","galleryRightColor","setGalleryRightColor","setGalleryTypes","hasGallery","setHasGallery","setMyCollections","myGallery","setMyGallery","getMyCollections","mydatas","getMyGallery","myGalleryData","changeGalleryInto","updateProfile","Input","TextArea","UploadPage","setTitle","attachment","setAttachment","submit","attachmentRef","child","uuidv4","putString","response","getDownloadURL","collectionOne","dbGal","paddingTop","accept","oneFile","files","reader","FileReader","onloadend","finishedEvent","readAsDataURL","InformationUpload","setCategory","InformationOne","QnAUpload","QnAOne","QnAPage","qna","setQna","info","setInfo","getThisQnA","galId","getThisQnaInfo","dbinfos","dbinfo","InformationPage","information","setInformation","getThisInformation","CollectionPage","getThisCollection","dbcol","paddingRight","LikePage","clikes","setClikes","glikes","setGlikes","setQclikes","getCollectionLikes","dbCollection","getGalleryLikes","getQnaCommentLikes","dbQna","glikesTable","clikesTable","AllCollections","AllGalleries","AllInformations","categoryTable","createBrowserHistory","AppRouter","minHeight","zIndex","exact","component","excct","AllQnAs","App","init","setInit","setIsLoggedIn","setUserObj","user","onAuthStateChanged","getFullYear","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ed367e42.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, {useEffect, useState} from 'react'\nimport './GalleryCard.css'\nimport { Image } from 'antd'\nimport { Link } from 'react-router-dom';\n\nconst GalleryCard = ({data}) => {\n\n    return (\n        <div className=\"gallery-card-container\" style={{background:`linear-gradient(to right, white 60%, ${data.color})`}}>\n            <Link to={{\n                pathname:`/gallery/${data.id}`,\n                state:{\n                    data:data\n                }\n            }} className=\"move\">\n            {/* <img src='img/logo512.png' className=\"galleryimg\"/> */}\n            <div className=\"types\">\n                {data.typess && data.typess.map((item, index) => {\n                    return (\n                        <span className=\"gallery-card-type\">{item}</span>\n                    )\n                })}\n            </div>   \n            <div className=\"titlecon\">\n                <p>{data.galleryName}</p>\n            </div>\n            <div className=\"namecon\">\n                <span>{data.displayName}님의 갤러리</span>\n                <span>|</span>\n                <span>{data.collection_num}개의 컬렉션</span>\n            </div>\n            </Link>\n        </div>\n    )\n}\n\nexport default GalleryCard\n","import React from 'react'\nimport GalleryCard from '../../../tools/GalleryCard'\nimport './BigGalleryList.css'\n\nconst gallery = [\n    {\n        title:\"🐹 연희동의 올드 트래포드\",\n        owner:\"김호진\",\n        nums:65,\n        id:1\n    }\n]\nconst BigGalleryList = () => {\n    return (\n        <div className=\"BigGalleryContainer\">\n            <div className=\"middle\">\n                <span> ll </span>\n                <span><GalleryCard data={gallery[0]}/></span>\n                <span> rr </span>\n            </div>\n        </div>\n    )\n}\n\nexport default BigGalleryList\n","// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\n// import { getAnalytics } from \"firebase/analytics\";\nimport firebase from \"firebase/app\"\nimport \"firebase/firestore\"\nimport \"firebase/storage\"\nimport {GoogleAuthProvider} from \"firebase/auth\";\n\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCqo2yNCw4kKO_ix2oYaJzQLnArICExcLo\",\n  authDomain: \"soozipapp-a2a15.firebaseapp.com\",\n  projectId: \"soozipapp-a2a15\",\n  storageBucket: \"soozipapp-a2a15.appspot.com\",\n  messagingSenderId: \"209476182118\",\n  appId: \"1:209476182118:web:8e5b54ab78334871858da7\",\n  measurementId: \"G-CEPTLWYYF0\"\n};\n\n// Initialize Firebase\nexport const app = firebase.initializeApp(firebaseConfig);\nexport const firebaseInstance = firebase;\n// const analytics = getAnalytics(app);\nexport const authService = app.auth(); // 많이 호출할거니까 아예 여기서 해버리기\nexport const dbService = app.firestore();\nexport const stService = app.storage();","import React from 'react'\nimport './QnACard.css'\nimport {Link} from 'react-router-dom'\n\nconst QnACard = ({data}) => {\n    return (\n        <div className=\"qna-card-container\">\n            <Link to={{\n                pathname:`/QnAPage/${data.id}`,\n                state:{\n                    data:data\n                }\n            }} className=\"link\">\n\n                <div>\n                    <span style={{fontSize:'13px', marginLeft:'0%'}}>{data.type}</span><span style={{marginLeft:'0px', color:'rgb(0,0,0,0.8)', fontSize:'12px'}}>에 관한 질문</span>\n                    <span style={{fontSize:'13px', marginLeft:'2%'}}>{data.category}</span><span style={{marginLeft:'0px', color:'rgb(0,0,0,0.8)', fontSize:'12px'}}>가 궁금해요</span>\n                </div>\n                <div className=\"qna-card-title\">{data.title}</div>     \n                <div className=\"qna-card-info\">       \n                    <span>작성자 : {data.displayName} </span>\n                    <span>|</span> \n                    <span>달린 답변 수 : {data.comment_num}</span>           \n                </div>\n            </Link>\n        </div>\n    )\n}\n\nexport default QnACard\n","import React from 'react'\nimport './QnACard.css'\nimport {Link} from 'react-router-dom'\n\nconst InformationCard = ({data}) => {\n    return (\n        <div className=\"qna-card-container\">\n            <Link to={{\n                pathname:`/InformationPage/${data.id}`,\n                state:{\n                    data:data\n                }\n            }} className=\"link\">\n\n                <div>\n                    <span style={{fontSize:'13px', marginLeft:'0%'}}>{data.type}</span><span style={{marginLeft:'0px', color:'rgb(0,0,0,0.8)', fontSize:'12px'}}>의 </span>\n                    <span style={{fontSize:'13px', marginLeft:'2%'}}>{data.category}</span><span style={{marginLeft:'0px', color:'rgb(0,0,0,0.8)', fontSize:'12px'}}>에 관한 정보</span>\n                </div>\n                <div className=\"qna-card-title\">{data.title}</div>     \n                <div className=\"qna-card-info\">       \n                    <span>작성자 : {data.displayName} </span>\n                    <span>|</span> \n                    <span>유용해요 수 : {data.like_num}</span>           \n                </div>\n            </Link>\n        </div>\n    )\n}\n\nexport default InformationCard\n","import React from 'react'\nimport {Link} from 'react-router-dom';\nimport {dbService} from '../../../tools/fbase';\nimport {stService} from '../../../tools/fbase'\n\nconst CollectionCard = ({item}) => {\n    const onClickDelete = async () => {\n        const ok = window.confirm(\"Are you sure you want to delete?\");\n        if(ok){\n            //delete 파일도 같이 지워져야만 한다.\n            await dbService.doc(`collections/${item.id}`).delete();\n            await stService.refFromURL(item.attachmentURL).delete(); // URL만 가지고도 refence를 획들할 수 있게 해준다.\n        }else{\n\n        }\n    }\n    return (\n        <div className=\"one-collection-container2\">\n            <Link to={{\n                pathname:`/CollectionPage/${item.id}`,\n                state:{\n                    data:item\n                }\n            }} className=\"one-collection\">\n                {/* 실수로 파일을 삭제했을때를 대비 */}\n                <div className=\"one-collection-type\">{item.type}</div>\n                {item.attachmentURL && <img src={item.attachmentURL}  className=\"collection-img\"/>}\n                <div className=\"collection-info\" style={{display: \"flex\"}}>\n                    <span className=\"title\">\n                        {item.title}\n                    </span>\n                    <span className=\"like\">\n                        {item.like_num}\n                    </span>\n                </div>\n            </Link>\n        </div>\n    )\n}\n\nexport default CollectionCard;\n","\nexport const typeSelect = [\n    { value: 'all', label: '전체' },\n    { value: 'doll', label: \"🧸 인형\" },\n    { value: 'bearbrick', label: \"🗿 베어브릭\" },\n    { value: 'music', label: \"💽 음악\" },\n    { value: 'sports', label: \"🏟 스포츠\" },\n    { value: 'sneakers', label: \"👟 스니커즈\" },\n    { value: 'figure', label: \"🗽 피규어\" },\n    { value: 'etc', label: \"🦁 기타\" },\n]\nexport const types = [ '전체', \"🧸 인형\", \"🗿 베어브릭\", \"💽 음악\", \"🏟 스포츠\", \"👟 스니커즈\",\"🗽 피규어\", \"🦁 기타\" ]\n\nexport const categories = [\n    {value:\"buy\", label:\"📦 구매\"}, \n    {value:\"sell\", label:\"💰 판매\"}, \n    {value:\"keep\", label:\"🧺 보관\"}, \n    {value:\"real\", label:\"🤦🏻‍♂️ 정품\"}, \n    {value:\"foriegn\", label:\"🛩 해외거래\"}, \n    {value:\"etc\", label:\"🥪 기타정보\"}\n]\nexport const categorieslist = [ \"전체\", \"📦 구매\", \"💰 판매\", \"🧺 보관\", \"🤦🏻‍♂️ 정품\", \"🛩 해외거래\", \"🥪 기타정보\" ]","import React from 'react'\nimport {useState, useEffect} from 'react'\nimport './Sections/LandingPage.css'\nimport GalleryCard from '../../tools/GalleryCard'\nimport BigGalleryList from './Sections/BigGalleryList'\nimport { Link } from 'react-router-dom';\nimport * as FaIcons from 'react-icons/fa';\nimport { app } from '../../tools/fbase';\nimport { dbService } from '../../tools/fbase';\nimport QnACard from './Sections/QnACard'\nimport InformationCard from './Sections/InformationCard'\nimport CollectionCard from './Sections/CollectionCard'\nimport { types } from '../../tools/types'\nimport Modal from '@mui/material/Modal';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\nimport {firebaseInstance, authService, GoogleAuthProvider} from '../../tools/fbase';\n\nconst style = {\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n    width: 600,\n    bgcolor: 'background.paper',\n    borderRadius: '15px',\n    border: '1px solid rgba(0,0,0,0.1)',\n    boxShadow: 24,\n    p: 4,\n};\n\nconst LandingPage = ({isLoggedIn}) => {\n    const [galleries, setGalleries] = useState([]);\n    const [collections, setCollections] = useState([]);\n    const [qnas, setQnas] = useState([]);\n    const [informations, setInformations] = useState([]);\n    const [type, setType] = useState(\"전체\");\n    const [open, setOpen] = useState(false);\n    const [loading, setLoading] = useState(false);\n\n    const handleOpen = () => {\n        setOpen(true);\n        \n    }\n\n    const handleClose = () => setOpen(false);\n\n\n    const onSocialClick = async (e) => {\n        //지금은 구글 로그인 밖에 없기때문에 굳이 구분하는 flow를 만들지 않는다.\n        let provider = new firebaseInstance.auth.GoogleAuthProvider();\n        const data = await authService.signInWithPopup(provider);\n        handleClose();\n    }\n\n    const getAllCollections = async () => {\n        const galleryDatas = await dbService\n            .collection(\"users\")\n            .orderBy(\"like_num\", \"desc\")\n            .limit(12)\n            .get(); // uid를 creatorId로 줬었으니까.\n        let galleryData = galleryDatas.docs.map(doc => {\n            return({...doc.data(), id:doc.id})\n        });\n        if(type===\"전체\"){\n            setGalleries(galleryData.slice(0,6));\n        }else{\n            galleryData = galleryData.filter(item => item.typess.includes(type) || item.typess.includes(\"전체\"))\n            setGalleries(galleryData.slice(0,6));\n        }\n    }\n\n    const getRealAllCollections = async () => {\n        if(type===\"전체\"){\n            const collectionDatas = await dbService\n                .collection(\"collections\")\n                .orderBy(\"like_num\", \"desc\")\n                .limit(10)\n                .get(); // uid를 creatorId로 줬었으니까.\n            let collectionData = collectionDatas.docs.map(doc => {\n                return({...doc.data(), id:doc.id})\n            });\n            setCollections(collectionData);\n        }else{\n            const collectionDatas = await dbService\n                .collection(\"collections\")\n                .orderBy(\"like_num\", \"desc\")\n                .where(\"type\", \"==\", type)\n                .limit(10)\n                .get(); // uid를 creatorId로 줬었으니까.\n            let collectionData = collectionDatas.docs.map(doc => {\n                return({...doc.data(), id:doc.id})\n            });\n            setCollections(collectionData);\n        }\n    }\n\n    const getAllInformations = async () => {\n        if(type===\"전체\"){\n            const infoDatas = await dbService\n                .collection(\"informations\")\n                .limit(6)\n                .get(); // uid를 creatorId로 줬었으니까.\n\n            let infoData = infoDatas.docs.map(doc => {\n                return({...doc.data(), id:doc.id})\n            });\n            setInformations(infoData);\n        }else{\n            const infoDatas = await dbService\n                .collection(\"informations\")\n                .where(\"type\", \"==\", type)\n                .limit(6)\n                .get(); // uid를 creatorId로 줬었으니까.\n\n            let infoData = infoDatas.docs.map(doc => {\n                return({...doc.data(), id:doc.id})\n            });\n            setInformations(infoData);\n        }\n\n        // if(type===\"전체\"){\n        //     setInformations(infoData);\n        // }else{\n        //     infoData = infoData.filter(item => item.type === type || item.type === \"전체\")\n        //     setInformations(infoData);\n        // }\n    }\n\n    const getAllQnAs = async () => {\n        if(type===\"전체\"){\n            const qnaDatas = await dbService\n                .collection(\"qnas\")\n                .limit(6)\n                .get(); // uid를 creatorId로 줬었으니까.\n\n            let qnaData = qnaDatas.docs.map(doc => {\n                return({...doc.data(), id:doc.id})\n            });\n            setQnas(qnaData);\n        }else{\n            const qnaDatas = await dbService\n                .collection(\"qnas\")\n                .where(\"type\", \"==\", type)\n                .limit(6)\n                .get(); // uid를 creatorId로 줬었으니까.\n\n            let qnaData = qnaDatas.docs.map(doc => {\n                return({...doc.data(), id:doc.id})\n            });\n            setQnas(qnaData);\n\n        }\n        setLoading(true);\n    }\n\n    useEffect(() => {\n        getAllCollections();\n        getRealAllCollections();\n        getAllInformations();\n        getAllQnAs();\n    },[type])\n\n    const galleryTable = galleries.map((item, index) => {\n        return(\n            <GalleryCard data={item} key={index}/>\n            )\n        })\n\n    const qnaTable = qnas.map((item, index) => {\n        return(\n            <QnACard data={item} key={index} />\n        )\n    })\n\n    const informationTable = informations.map((item, index) => {\n        return(\n            <InformationCard data={item} key={index} />\n        )\n    })\n\n    const typeTable = types.map((item, index) => {\n        let backColor = \"#dddddd\"\n        if(item === type){\n            backColor = \"#ff0000\"\n        }\n        return(\n            <div className=\"typeOne\" key={index} style={{backgroundColor: `${backColor}`}}>\n                <Button onClick={() => {setType(item);}} style={{color:'black', fontSize:'12px'}}>{item}</Button>\n            </div>\n        )\n    })\n\n    const collectionTable = collections.map((item, index) => {\n        return(\n            <CollectionCard item={item} key={index}/>\n        )\n    })\n\n    // 빅 갤러리 리스트에 ContextAPI로 넘겨주기\n    if( loading ){\n    return (\n        <div className=\"landingcontainer\">\n            <div className=\"type-title\">원하는 카테고리를 골라보세요.</div>\n            <div className=\"type-table23\">\n                {typeTable}\n            </div>\n            <BigGalleryList />\n            \n            <div className=\"qna-table-container\">\n                <div className=\"qna-table-title\">\n                    <span>갤러리들 입니다</span>\n                    <Link to=\"allgalleries\" className=\"more-look-button\">갤러리 더보기 ></Link>\n                </div>\n                <div className=\"landing-qna-table\">\n                    {galleryTable}\n                </div>\n            </div>\n\n            <div className=\"qna-table-container\">\n                <div className=\"qna-table-title\">\n                    <span>컬렉션들 입니다</span>\n                    <Link to=\"allcollections\" className=\"more-look-button\">컬렉션 더보기 ></Link>\n                </div>\n                <div className=\"landing-qna-table\">\n                    {collectionTable}\n                </div>\n            </div>\n\n            <div className=\"qna-table-container\">\n                <div className=\"qna-table-title\">\n                    <span>🍯 꿀정보 교환소</span>\n                    <Link to=\"allinformations\" className=\"more-look-button\">정보 더보기 ></Link>\n                </div>\n                <div className=\"landing-qna-table\">\n                    {informationTable}\n                </div>\n            </div>\n\n            <div className=\"qna-table-container\">\n                <div className=\"qna-table-title\">\n                    <span>🙋🏻 QnA 거래소</span>\n                    <Link to=\"allqnas\" className=\"more-look-button\">QnA 더보기 ></Link>\n                </div>\n                <div className=\"landing-qna-table\">\n                    {qnaTable}\n                </div>\n            </div>\n\n            {isLoggedIn ? <>\n            <Link to=\"upload\" className=\"upload-button\">컬렉션 등록하기</Link> \n            <Link to=\"uploadQnA\" className=\"upload-button\" style={{right:300}}>질문 등록하기</Link> \n            <Link to=\"uploadInformation\" className=\"upload-button\" style={{right:800}}>정보 등록하기</Link> \n            </>: \n            <span className=\"upload-button\" onClick={handleOpen}>컬렉션 등록하기</span>\n            }\n            \n            {/* 아래는 수정용 모달. */}\n            <Modal\n                open={open}\n                onClose={handleClose}\n                aria-labelledby=\"modal-modal-title\"\n                aria-describedby=\"modal-modal-description\"\n            >\n                <Box sx={style}>\n                <div className=\"update-body\">\n                    <span style={{width: '100%'}}>\n                    <p className=\"login-desc\">3초만에 로그인하고 시작하기</p>\n\n                    </span>\n                    <span style={{width: '100%'}}>\n                        <button onClick={onSocialClick} className=\"google-login\">Google 로그인</button>\n                    </span>\n                    <div style={{width: '100%', display:'flex', justifyContent:'end'}}>\n                    <Button onClick={handleClose} style={{ marginLeft:10, color:'black',backgroundColor:'#993333', width:'10%'}}>\n                        닫기\n                    </Button>\n                    </div>\n                </div>\n                </Box>\n            </Modal>\n\n        </div>\n        )\n    }else{\n        return(\n        <div style={{display:'flex', justifyContent:'center', alignItems:'center', fontSize:'30px', fontFamily:'EliceBold', height:'100%'}}>\n            로딩중\n        </div>)\n    }\n\n}\n\nexport default LandingPage\n","import React from 'react'\nimport {Link} from 'react-router-dom';\nimport './OneCollections.css';\nimport {dbService} from '../tools/fbase';\nimport {stService} from '../tools/fbase';\n\nconst OneCollection = ({item,isOwner, isEditing}) => {\n    const onClickDelete = async () => {\n        const ok = window.confirm(\"Are you sure you want to delete?\");\n        if(ok){\n\n            const dbgallery = await dbService\n            .collection(\"users\")\n            .where(\"userId\", \"==\", item.creatorId)\n            .get()\n            \n            let dbgal = dbgallery.docs.map(doc => {return({...doc.data(), gal_id:doc.id})})\n\n            // collection 수도 1 낮추고\n            await dbService.doc(`users/${dbgal[0].gal_id}`)\n            .update({\n                collection_num:dbgal[0].collection_num - 1\n            })\n\n            // 댓글 목록에서도 지워야한다.\n            \n\n            //delete 파일도 같이 지워져야만 한다.\n            await dbService.doc(`collections/${item.id}`).delete();\n            await stService.refFromURL(item.attachmentURL).delete(); // URL만 가지고도 refence를 획득할 수 있게 해준다.\n\n            // like에서도 지워야됨.\n\n            alert(\"삭제했습니다.\")\n        }else{\n\n        }\n    }\n    return (\n        <div className=\"one-collection-container2\">\n            <Link to={{\n                pathname:`/CollectionPage/${item.id}`,\n                state:{\n                    data:item\n                }\n            }} className=\"one-collection\">\n                {/* 실수로 파일을 삭제했을때를 대비 */}\n                {item.attachmentURL && <img src={item.attachmentURL}  className=\"collection-img\"/>}\n                <div className=\"collection-info\" style={{display: \"flex\"}}>\n                    <span className=\"title\">\n                        {item.title}\n                    </span>\n                    <span className=\"like\">\n                        {item.like_num}\n                    </span>\n                </div>\n            </Link>\n            {isOwner && isEditing ? <>\n            <button onClick={onClickDelete}>Delete</button>\n            {/* <button>Update</button> */}\n            </> : null }\n        </div>\n    )\n}\n\nexport default OneCollection\n","import React from 'react'\nimport OneCollection from '../../../tools/OneCollection'\nimport {authService} from '../../../tools/fbase';\nimport './GalleryPage.css'\n\nconst CollectionList = ({collections, isEditing, mainColor}) => {\n    const User = authService.currentUser;\n\n    const collectionTable = collections.map((item, index) => {\n        if(User !== null){\n            return(\n                <OneCollection item={item} isEditing={isEditing} isOwner={item.creatorId === User.uid} key={index}/>\n            )\n        }else{\n            return(\n                <OneCollection item={item} isEditing={isEditing} isOwner={false} key={index}/>\n            )\n        }\n    })\n\n    return (\n        // <div className=\"collections-table\" style={{backgroundColor:`${mainColor}`}}>\n        <div className=\"collections-table2\">\n            {collectionTable}\n        </div>\n    )\n}\n\nexport default CollectionList\n","import React, {useEffect, useState} from 'react'\nimport {Link} from 'react-router-dom';\nimport Button from '@mui/material/Button';\nimport {Input} from 'antd'\nimport {authService, firebaseInstance, dbService} from './fbase';\nimport './CommentContainer.css'\nimport Modal from '@mui/material/Modal';\nimport Box from '@mui/material/Box';\n\nconst style = {\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n    width: 600,\n    bgcolor: 'background.paper',\n    borderRadius: '15px',\n    border: '1px solid rgba(0,0,0,0.1)',\n    boxShadow: 24,\n    p: 4,\n};\n\nconst CommentContainer = ({category, contentId, userId, contentLikeNum}) => {\n    const [update, setUpdate] = useState(false);\n    const [comment, setComment] = useState(\"\");\n    const [comments, setComments] = useState([]);\n    const [gid, setGid] = useState(\"\");\n    const [open, setOpen] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const User = authService.currentUser;\n\n    useEffect(() => {\n        getThisComments();\n    },[update])\n\n    const handleOpen = () => {\n        setOpen(true);\n    }\n\n    const handleClose = () => setOpen(false);\n\n\n    const onSocialClick = async (e) => {\n        //지금은 구글 로그인 밖에 없기때문에 굳이 구분하는 flow를 만들지 않는다.\n        let provider = new firebaseInstance.auth.GoogleAuthProvider();\n        const data = await authService.signInWithPopup(provider);\n        handleClose();\n    }\n\n    const getThisComments = async () => {\n        let dbcomments;\n        switch(category){\n            case \"c_comments\":{\n                dbcomments = await dbService\n                .collection(category)\n                .where(\"collectionId\", \"==\", contentId)\n                .orderBy(\"created\", \"desc\")\n                .get();\n                setComments(dbcomments.docs.map(doc => {return({...doc.data(), id:doc.id})}));\n                break;\n            }\n            case \"g_comments\":{\n                dbcomments = await dbService\n                .collection(category)\n                .where(\"userId\", \"==\", contentId)\n                .orderBy(\"created\", \"desc\")\n                .get();\n                setComments(dbcomments.docs.map(doc => {return({...doc.data(), id:doc.id})}));\n                break;\n            }\n            case \"qna_comments\":{\n                dbcomments = await dbService\n                .collection(category)\n                .where(\"qnaId\", \"==\", contentId)\n                .orderBy(\"created\", \"desc\")\n                .get();\n                setComments(dbcomments.docs.map(doc => {return({...doc.data(), id:doc.id})}));\n                break;\n            }\n            case \"i_comments\":{\n                dbcomments = await dbService\n                .collection(category)\n                .where(\"informationId\", \"==\", contentId)\n                .orderBy(\"created\", \"desc\")\n                .get();\n                setComments(dbcomments.docs.map(doc => {return({...doc.data(), id:doc.id})}));\n                break;\n            }\n        }\n    }\n\n    const uploadComment = async () => {\n        // 로그인 한 유저여야 한다.\n        if(!User){\n            handleOpen();\n            return;\n        }\n\n        const [usersId, galleryName, galleryColor] = await getCommenterGalleryId(User.uid)\n\n        switch(category){\n            case \"c_comments\":{\n                const commentOne = {\n                    creatorId:User.uid, // 댓글을 작성한 유저 아이디\n                    collectionId:contentId, // 댓글이 달린 컬렉션의 아이디\n                    comment:comment,\n                    displayName:User.displayName,\n                    created:Date.now(),\n                    galleryId:usersId, // 댓글을 작성한 유저가 소유한 갤러리 아이디.\n                    galleryName,\n                    galleryColor\n                };\n\n                if(comment.length < 3){\n                    alert(\"3글자 이상 입력하셔야 합니다.\")\n                    return;\n                }\n                await dbService.collection(category).add(commentOne)\n                .then((docRef) => {console.log(\"이걸로 함\", docRef.id)});\n                await dbService.doc(`collections/${contentId}`).update({\n                    comment_num:contentLikeNum + 1,\n                });\n                break;\n            }\n            case \"g_comments\":{\n                const commentOne = {\n                    creatorId:User.uid, // 댓글을 작성한 유저 아이디\n                    userId:contentId, // 댓글이 달린 갤러리의 아이디\n                    comment:comment,\n                    displayName:User.displayName,\n                    created:Date.now(),\n                    galleryId:usersId, // 댓글을 작성한 유저가 소유한 갤러리 아이디.\n                    galleryName,\n                    galleryColor\n                };\n\n                if(comment.length < 3){\n                    alert(\"3글자 이상 입력하셔야 합니다.\")\n                    return;\n                }\n\n                await dbService.collection(category).add(commentOne)\n                .then((docRef) => {console.log(\"이걸로 함\", docRef.id)});\n                await dbService.doc(`users/${contentId}`).update({\n                    comment_num:contentLikeNum + 1,\n                });\n                break;\n            }\n            case \"i_comments\":{\n                const commentOne = {\n                    creatorId:User.uid,\n                    comment:comment,\n                    displayName:User.displayName,\n                    created:Date.now(),\n                    like_num:0,\n                    informationId:contentId,\n                    galleryId:usersId, // 댓글을 작성한 유저가 소유한 갤러리 아이디.\n                    galleryName,\n                    galleryColor\n                };\n\n                if(comment.length < 3){\n                    alert(\"3글자 이상 입력하셔야 합니다.\")\n                    return;\n                }\n\n                await dbService.collection(\"i_comments\").add(commentOne)\n                    .then((docRef) => {console.log(\"이걸로 함\", docRef.id)});\n                await dbService.doc(`informations/${contentId}`).update({\n                    comment_num:contentLikeNum + 1,\n                });\n                \n                break;\n            }\n            case \"qna_comments\":{\n                const commentOne = {\n                    creatorId:User.uid,\n                    comment:comment,\n                    displayName:User.displayName,\n                    created:Date.now(),\n                    like_num:0,\n                    qnaId:contentId,\n                    galleryId:usersId, // 댓글을 작성한 유저가 소유한 갤러리 아이디.\n                    galleryName,\n                    galleryColor\n                };\n\n                if(comment.length < 3){\n                    alert(\"3글자 이상 입력하셔야 합니다.\")\n                    return;\n                }\n\n                await dbService.collection(\"qna_comments\").add(commentOne)\n                .then((docRef) => {console.log(\"이걸로 함\", docRef.id)});\n                await dbService.doc(`qnas/${contentId}`).update({\n                    comment_num:contentLikeNum + 1,\n                });\n                break;\n            }\n        }\n\n        alert(\"댓글 작성!\")\n        setComment(\"\");\n        setUpdate(!update);\n    }\n\n\n    const likeComment = async (item) => {\n        // 좋아요를 누른 적 있는지 체크해야한다.\n        const dbLike = await dbService\n            .collection(\"qna_comments_like\")\n            .where(\"creatorId\", \"==\", User.uid)\n            .where(\"qnaId\", \"==\", item.id)\n            .get();\n        const db_like = dbLike.docs.map(doc => {return({...doc.data(), id:doc.id})});\n\n        if(db_like.length === 0){\n            const likeOne = {\n                creatorId: User.uid,\n                qnaId: item.id\n            }\n            await dbService.collection(\"qna_comments_like\").add(likeOne)\n\n            await dbService.doc(`qna_comments/${item.id}`).update({\n                like_num:item.like_num + 1\n            });\n            alert(\"누르기 했습니다. \");\n            setUpdate(!update);\n        }else{\n            const ok = window.confirm(\"이미 좋아요를 누르셨습니다. 취소하시겠습니까?\");\n            \n            if(ok){\n                await dbService.doc(`qna_comments_like/${db_like[0].id}`).delete();\n\n                await dbService.doc(`qna_comments/${item.id}`).update({\n                    like_num:item.like_num - 1,\n                });\n                alert(\"취소 했습니다!\");\n                setUpdate(!update);\n            }else{\n                return;\n            }\n        }\n    }\n    \n    const deleteComment = async (item) => {\n        const ok = window.confirm(\"Are you sure you want to delete?\");\n        if(ok){\n            //delete 파일도 같이 지워져야만 한다.\n            await dbService.doc(`${category}/${item.id}`).delete();\n            switch(category){\n                case \"c_comments\":{\n                    await dbService.doc(`collections/${contentId}`).update({\n                        comment_num:contentLikeNum - 1,\n                    });\n                    break;\n                }\n                case \"g_comments\":{\n                    await dbService.doc(`users/${contentId}`).update({\n                        comment_num:contentLikeNum - 1,\n                    });\n                    break;\n                }\n                case \"i_comments\":{\n                    await dbService.doc(`informations/${contentId}`).update({\n                        comment_num:contentLikeNum - 1,\n                    });\n                    break;\n                }\n            }\n            alert(\"삭제 했습니다. \");\n            setUpdate(!update);\n        }else{\n\n        }\n    }\n\n    const getCommenterGalleryId = async (creatorId) => {\n\n        const dbGallery = await dbService.collection(\"users\")\n        .where(\"userId\", \"==\", creatorId)\n        .get();\n\n        let result = dbGallery.docs.map(doc => {return({...doc.data(), id:doc.id})})\n\n        if(result.length === 0){\n            return \"\";\n        }else{\n            return [result[0].id, result[0].galleryName, result[0].color];\n        }\n    }\n\n    const commentTable = comments.map((item,index) => {\n        let isOwner = false;\n        if(User){\n            isOwner = item.creatorId === User.uid;\n        }\n        let date = new Date(item.created);\n        let now = new Date();\n        \n        let day = now.getDate() - date.getDate();\n        let month = now.getMonth() - date.getMonth();\n        let hour = now.getHours() - date.getHours();\n\n        let dateResult;\n        if(month === 0){\n            if(day===0){\n                dateResult = hour + \"시간 전\"\n            }else{\n                dateResult = day + \"일 전\"\n            }\n        }else{\n            dateResult = month + \"달 전\"\n        }\n\n        let likeColor = '#000000';\n        if(category === \"qna_comments\" && item.like_num > 5){\n            likeColor = 'rgb(145, 2, 2)'\n        }else if(category === \"qna_comments\" && item.like_num > 5){\n            likeColor = '#6705b8'\n        }\n\n        return(\n            <div className=\"comment-one\" key={index}>\n                <span className=\"comment-body\">\n                    <Link to={{\n                        pathname:`/gallery/${item.galleryId}`\n                    }} className=\"comment-move\">\n                        <p style={{margin:'3px'}}><span style={{color:'gray'}}>작성</span> {item.displayName}</p>\n                        <p style={{margin:'3px', color:`${item.galleryColor}`}}>{item.galleryName} </p>\n                    </Link>\n                    <div className=\"comment-body-body\">\n                        <p style={{margin:'0px', marginTop:'3px', color:'rgba(0,0,0,0.2)', fontSize:'12px', paddingLeft:'0%'}}>\n                            {dateResult}\n                        </p>\n                        <p style={{margin:'0px'}}> {item.comment}</p>\n                    </div>\n                </span>\n                <span className=\"buttons\">\n                    { category === \"qna_comments\" && <>\n                    <span onClick={() => likeComment(item)} \n                        style={{backgroundColor:'#5555ff', fontSize:'12px', color:'white', margin:'2px'}} \n                        className=\"like-button\">\n                        👍\n                    </span>\n                    <span className=\"like-num\" style={{color:`${likeColor}`}}>{item.like_num}</span>\n                    </>}\n                    \n                    { isOwner && <>\n                        <span onClick={() => deleteComment(item)} \n                            className=\"delete-button\">X</span>\n                    </>}\n                </span>\n            </div>\n        )\n    })\n\n    {/* 댓글을 달고 보여주는 공간 */}\n    return (\n        <div className=\"comment-container\">\n            <div className=\"comment-body-container\">\n                { category === \"g_comments\" ? \n                    <div className=\"comment-title\">\n                        <span style={{fontSize:'18px', color:'green'}}>갤러리 방명록</span>    공간에 대한 감상평을 남겨보세요!\n                    </div> : null\n                }\n                <div className=\"comment-input-container\">\n                    <Input value={comment} onChange={e => setComment(e.currentTarget.value)} placeholder=\"댓글을 입력하세요.\" className=\"comment-input\"/>\n                    <span className=\"comment-send\" onClick={uploadComment} >\n                        작성\n                    </span>\n                </div>\n                <div className=\"comment-table-container\">\n                    {commentTable}\n                </div>\n            </div>\n\n            {/* 아래는 수정용 모달. */}\n            <Modal\n                open={open}\n                onClose={handleClose}\n                aria-labelledby=\"modal-modal-title\"\n                aria-describedby=\"modal-modal-description\"\n            >\n                <Box sx={style}>\n                <div className=\"update-body\">\n                    <span style={{width: '100%'}}>\n                    <p className=\"login-desc\">3초만에 로그인하고 시작하기</p>\n\n                    </span>\n                    <span style={{width: '100%'}}>\n                        <button onClick={onSocialClick} className=\"google-login\">Google 로그인</button>\n                    </span>\n                    <div style={{width: '100%', display:'flex', justifyContent:'end'}}>\n                    <Button onClick={handleClose} style={{ marginLeft:10, color:'black',backgroundColor:'#993333', width:'10%'}}>\n                        닫기\n                    </Button>\n                    </div>\n                </div>\n                </Box>\n            </Modal>\n        </div>\n    )\n}\n\nexport default CommentContainer\n","import React, {useEffect, useState,useRef} from 'react'\nimport './Sections/GalleryPage.css'\nimport { dbService } from '../../tools/fbase';\nimport OneCollection from '../../tools/OneCollection';\nimport {authService} from '../../tools/fbase';\nimport CollectionList from './Sections/CollectionList';\nimport CommentContainer from '../../tools/CommentContainer';\nimport * as FaIcons from 'react-icons/fa';\nimport Button from '@mui/material/Button';\nimport * as AiIcons from 'react-icons/ai';\n\nconst GalleryPage = (props) => {\n    const targets = useRef(null);\n    const [update, setUpdate] = useState(false);\n    const [collections, setCollections] = useState([]);\n    const [item, setItem] = useState({});\n    const [loading, setLoading] = useState(false);\n    const [now, setNow] = useState(\"\");\n    const User = authService.currentUser;\n    const [open, setOpen] = useState(false);\n    const [isEditing, setIsEditing] = useState(false);\n\n    const scrollDown = () => {\n        // const target = document.getElementById('second')\n        targets.current.scrollIntoView({behavior: 'smooth'})\n    }\n\n    const handleOpen = () => {\n        setOpen(true);\n        \n    }\n    const handleClose = () => setOpen(false);\n\n    const editOpen = () => {\n        setIsEditing(!isEditing);\n    }\n\n    // useEffect안에서 async를 하기 위해서 이렇게 따로 함수로 빼서 한다.\n    // getThisCollections(); 이건 옛날방식이다?ㅠㅠ\n    const getThisCollections = async () => {\n        if(loading === true){\n            const dbcollections = await dbService\n            .collection(\"collections\")\n            .where(\"creatorId\", \"==\", item.userId)\n            .get();\n            setCollections(dbcollections.docs.map(doc => {\n                return({...doc.data(), id:doc.id})        \n                }\n            ));\n        }\n        //     // set이 붙는 함수를 쓸 때 값이 아니라 함수를 전달할 수 있다.\n    }\n    const getThisGallery = async () => {\n        const dbgallery = await dbService\n        .collection(\"users\")\n        .doc(props.match.params.id)\n        .get()\n        .then(snapshot => setItem({...snapshot.data(), id:snapshot.id}));\n        //     // set이 붙는 함수를 쓸 때 값이 아니라 함수를 전달할 수 있다.\n        setLoading(true);\n        setNow(props.match.params.id)\n    }\n\n    useEffect(() => {\n        if(now !== props.match.params.id){\n            setLoading(false);\n        }\n        // if(props.location.state === undefined){\n        //     props.history.push(\"/\")       \n        // }\n        getThisGallery();\n        getThisCollections(); // 이건 옛날방식이다?ㅠㅠ\n        // 이 방법이 re-render하지 않아서 더 빠르다.\n    },[update, loading, props.match.params.id])\n\n    const addLike = async () => {\n        // 좋아요를 누른 적 있는지 체크해야한다.\n        const dbLike = await dbService\n            .collection(\"users_like\")\n            .where(\"creatorId\", \"==\", User.uid)\n            .where(\"galleryId\", \"==\", item.id)\n            .get();\n        const db_like = dbLike.docs.map(doc => {return({...doc.data(), id:doc.id})});\n        console.log(\"dbLike\", db_like)\n\n        if(db_like.length === 0){\n            const likeOne = {\n                creatorId: User.uid,\n                galleryId: item.id\n            }\n            await dbService.collection(\"users_like\").add(likeOne)\n\n            await dbService.doc(`users/${item.id}`).update({\n                like_num:item.like_num + 1,\n            });\n            alert(\"I like it!\");\n            setUpdate(!update);\n        }else{\n            const ok = window.confirm(\"이미 좋아요를 누르셨습니다. 취소하시겠습니까?\");\n            console.log(db_like[0].id);\n            \n            if(ok){\n                await dbService.doc(`users_like/${db_like[0].id}`).delete();\n\n                await dbService.doc(`users/${item.id}`).update({\n                    like_num:item.like_num - 1,\n                });\n                alert(\"취소 했습니다!\");\n                setUpdate(!update);\n            }else{\n                return;\n            }\n        }\n    }\n\n    \n    return (\n        <div className=\"gallery-container\" style={{ background:`linear-gradient(to right, ${item.left_color} 30%, ${item.right_color})`}}>\n            <div className=\"gallery-header\">\n                { User ? item.userId === User.uid && \n                <span className=\"if-my-gallery\">\n                    이곳은 내 갤러리 입니다.\n                    { isEditing ? <Button onClick={editOpen} style={{backgroundColor:'blue'}}>완료하기</Button> : \n                    <Button onClick={editOpen} style={{backgroundColor:'red'}}>컬렉션 삭제하기</Button>}\n                </span> : null\n                }\n                <span className=\"gallery-owner\" style={{backgroundColor:`${item.color}`}}>\n                    <div>\n                        <span className=\"font\">{item.displayName}</span>님의 공간입니다.\n                    </div>\n                    <span className=\"gallery-title\">\n                        {item.galleryName}\n                    </span>\n                </span>\n                <div className=\"title-info\">\n                    <p><span>{item.collection_num}개의 컬렉션이 전시되어있고 </span><span> {item.like_num}명이 좋아합니다. </span><span s tyle={{marginLeft:'10%'}}> {item.comment_num}개의 댓글</span></p>\n                </div>\n                <div className=\"gallery-type-table\">\n                    {loading && item.typess.map((item, index) => {\n                        return (\n                            <span key={index} className=\"tag\">{item}</span>\n                        )\n                    })}\n                </div>\n                <div className=\"galley-info\">\n                    {item.desc}\n                </div>\n            </div>\n            <div className=\"collection-list\">\n                <CollectionList collections={collections} mainColor={\"rgba(0,0,0,0)\"} isEditing={isEditing}/>\n            </div>\n            {/* 비슷한 갤러리 추천 공간 */}\n            <div>\n                \n            </div>\n\n            <hr color=\"black\"/>\n            {/* 댓글을 달고 보여주는 공간 */}\n\n            <div ref={targets} ></div>\n\n            { loading && <CommentContainer category=\"g_comments\" contentId={item.id} userId={item.userId} contentLikeNum={item.comment_num} />}\n            \n            <span className=\"side-actions\">\n                <span className=\"action-component\" onClick={addLike}>\n                    <FaIcons.FaRegHeart color=\"5555ff\" size=\"30px\"/>\n                    <span className=\"num\">{item.like_num}</span>\n                </span>\n                <span className=\"action-component\" onClick={scrollDown}>👁‍🗨 {item.comment_num}</span>\n                <span className=\"action-component\">✉️</span>\n            </span>\n        </div>\n    )\n}\n\nexport default GalleryPage\n","import React from 'react'\nimport * as FaIcons from 'react-icons/fa';\nimport * as AiIcons from 'react-icons/ai';\nimport * as IoIcons from 'react-icons/io';\n\nexport const SideBarData = [\n    {\n        title:'Home',\n        path:'/',\n        icon: \"🏡\",\n        cName: 'nav-text'\n    },\n    {\n        title:'내 갤러리',\n        path:'/profile',\n        icon: \"🧑🏻‍💻\",\n        cName: 'nav-text'\n    },\n    {\n        title:'my likes',\n        path:'/mylikes',\n        icon: \"👍\",\n        cName: 'nav-text'\n    },\n    {\n        title:'내 정보 수정하기',\n        path:'/update',\n        icon: \"📑\",\n        cName: 'nav-text'\n    },\n    {\n        title:'의견 제공 및 문의하기',\n        path:'/help',\n        icon: \"🙋🏻\",\n        cName: 'nav-text'\n    },\n]","import React, {useState} from 'react'\nimport { Link } from 'react-router-dom';\nimport './Sections/NavBar.css'\nimport * as FaIcons from 'react-icons/fa';\nimport * as AiIcons from 'react-icons/ai';\nimport { SideBarData } from './Sections/SideBarData';\nimport { IconContext } from 'react-icons';\nimport {firebaseInstance, authService, GoogleAuthProvider} from '../../tools/fbase';\nimport Button from '@mui/material/Button';\nimport Modal from '@mui/material/Modal';\nimport Box from '@mui/material/Box';\n\nconst style = {\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n    width: 600,\n    bgcolor: 'background.paper',\n    borderRadius: '15px',\n    border: '1px solid rgba(0,0,0,0.1)',\n    boxShadow: 24,\n    p: 4,\n};\n\n\nconst NavBar = ({isLoggedIn, userObj}) => {\n    const [sidebar, setSidebar] = useState(false);\n    const [open, setOpen] = useState(false);\n\n    const handleOpen = () => {\n        setOpen(true);\n    }\n\n    const handleClose = () => setOpen(false);\n\n    const showSidebar = () => {\n        setSidebar(!sidebar);\n        console.log(\"사이드바 인 아웃\");\n    }\n\n    const onLogOutClick = () => {\n        console.log(\"로그아웃\")\n        authService.signOut();\n    }\n\n    const onSocialClick = async (e) => {\n        //지금은 구글 로그인 밖에 없기때문에 굳이 구분하는 flow를 만들지 않는다.\n        let provider = new firebaseInstance.auth.GoogleAuthProvider();\n        const data = await authService.signInWithPopup(provider);\n    }\n\n    return (\n        <div>\n            <div className=\"header\">\n                <span>\n                    <Link to=\"/\" className=\"nav-title\">Soozip</Link>\n                </span>\n                <span className=\"nav-on\">\n                    {isLoggedIn ? <button onClick={onLogOutClick} className=\"inout-button\">로그아웃</button> : <button onClick={onSocialClick}>로그인</button>}\n                    {userObj ? <p style={{fontWeight:700}}>{userObj.displayName}</p> : null}\n                    <Link to=\"#\" className=\"menu-bars\">\n                        <FaIcons.FaBars onClick={showSidebar} />\n                    </Link>\n                </span>\n            </div>\n                <nav className={sidebar ? 'nav-menu active' : 'nav-menu'}>\n                    <ul className=\"nav-menu-items\" onClick={showSidebar}>\n                        <li className=\"navbar-toggle\">\n                            <Link to=\"#\" className='menu-bars'>\n                                <AiIcons.AiOutlineClose/>\n                            </Link>\n                        </li>\n                        {SideBarData.map((item, index) => {\n                            if(!isLoggedIn && item.title === \"내 갤러리\"){\n                                return(\n                                    <li key={index} className={item.cName}>\n                                        <span to={item.path} onClick={handleOpen}>\n                                            {item.icon}\n                                            <span style={{color:'white'}}>{item.title}</span>\n                                        </span>\n                                    </li>\n                                )\n                            }else if(!isLoggedIn && item.title === \"my likes\"){\n                                return(\n                                    <li key={index} className={item.cName}>\n                                        <span to={item.path} onClick={handleOpen}>\n                                            {item.icon}\n                                            <span style={{color:'white'}}>{item.title}</span>\n                                        </span>\n                                    </li>\n                                )\n                            }else if(isLoggedIn && item.title === \"내 갤러리\"){\n                                return(\n                                    <li key={index} className={item.cName}>\n                                        <Link to={{\n                                            pathname:`/gallery/${userObj.gal_id}`\n                                        }}>\n                                            {item.icon}\n                                            <span>{item.title}</span>\n                                        </Link>\n                                    </li>\n                                )\n                            }else{\n                                return (\n                                <li key={index} className={item.cName}>\n                                    <Link to={item.path}>\n                                        {item.icon}\n                                        <span>{item.title}</span>\n                                    </Link>\n                                </li>\n                                )\n                            }\n                        })}\n                        <li className=\"nav-text\">\n                            <a href=\"https://naver.com\" target=\"_black\">\n                                <AiIcons.AiOutlineInstagram/> Instagram\n                            </a>\n                        </li>\n                    </ul>\n                </nav>\n\n            {/* 아래는 수정용 모달. */}\n            <Modal\n                open={open}\n                onClose={handleClose}\n                aria-labelledby=\"modal-modal-title\"\n                aria-describedby=\"modal-modal-description\"\n            >\n                <Box sx={style}>\n                <div className=\"update-body\">\n                    <span style={{width: '100%'}}>\n                    <p className=\"login-desc\">3초만에 로그인하고 시작하기</p>\n\n                    </span>\n                    <span style={{width: '100%'}}>\n                        <button onClick={onSocialClick} className=\"google-login\">Google 로그인</button>\n                    </span>\n                    <div style={{width: '100%', display:'flex', justifyContent:'end'}}>\n                    <Button onClick={handleClose} style={{ marginLeft:10, color:'black',backgroundColor:'#993333', width:'10%'}}>\n                        닫기\n                    </Button>\n                    </div>\n                </div>\n                </Box>\n            </Modal>\n        </div>\n    )\n}\n\nexport default NavBar\n","import React, {useState} from 'react'\nimport { dbService } from '../../../tools/fbase'\nimport {useHistory} from 'react-router-dom'\nimport Select from 'react-select'\nimport {typeSelect} from '../../../tools/types'\nimport makeAnimated from 'react-select/animated';\nimport Picker, { SKIN_TONE_MEDIUM_DARK } from \"emoji-picker-react\";\nimport './MakeGallery.css'\n\nconst animatedComponents = makeAnimated();\n\nconst MakeGallery = ({userObj}) => {\n    const history = useHistory();\n    const [galleryName, setGalleryName] = useState(\"\");\n    const [typess, setTypess] = useState([]);\n    const [type, setType] = useState(\"\");\n    const [color, setColor] = useState(\"#f0f0f0\");\n    const [desc, setDesc] = useState(\"\");\n    const [chosenEmoji, setChosenEmoji] = useState(null);\n    const [showemoji, setShowemoji] = useState(\"none\");\n\n    const onEmojiClick = (event, emojiObject) => {\n        setChosenEmoji(emojiObject);\n        setGalleryName(emojiObject.emoji + galleryName);\n      };\n\n    const showEmojiSelect = () => {\n        if(showemoji === 'none') {setShowemoji('flex')}\n        else{setShowemoji('none')}\n    }\n\n    \n    const submitGallery = async e => {\n        e.preventDefault();\n        console.log(galleryName, color, desc, userObj.uid);\n        const galleryOne = {\n            galleryName,\n            color,\n            desc,\n            userId:userObj.uid,\n            displayName:userObj.displayName,\n            like_num:0,\n            comment_num:0,\n            collection_num:0,\n            typess:typess,\n            left_color:'white',\n            right_color:'white'\n        };\n\n        await dbService.collection(\"users\").add(galleryOne);\n        alert(\"갤러리 생성!\");\n        history.go(0);\n    }\n\n    const changeTypes = e => {\n        let tts = [];\n        e.forEach(i => {\n            tts.push(i.label)\n        });\n\n        setTypess(tts)\n    }\n\n    return (\n        <div className=\"uploadcontainer\">\n            <div className=\"uploadIncontainer\">\n                <form onSubmit={submitGallery}>\n                    <p className=\"thanks\"> 갤러리 생성하기 </p>\n                    <p className=\"add-thanks\">나만의 개성이 가득담긴 공간을 만들어보세요 </p>\n                    <p className=\"inputLabel\">갤러리 이름</p>\n                    <p className=\"inputLabel\">ex. 🗽방구석 호그와트</p>\n\n                    <div style={{display:`${showemoji}`}}>\n                        <Picker\n                            onEmojiClick={onEmojiClick}\n                            disableAutoFocus={true}\n                            groupNames={{ smileys_people: \"PEOPLE\" }}\n                            native\n                        />\n                    </div>\n                    <span onClick={showEmojiSelect} className=\"emojiSelect\" >이모지 선택</span>\n                    <input autoSize={{ minRows: 1, maxRows: 2 }} placeholder=\"갤러리 이름\" \n                        className=\"nameInput\" \n                        value={galleryName} \n                        onChange={(e) => {setGalleryName(e.currentTarget.value)}}>\n                    </input>\n\n                    <p className=\"inputLabel\">컬렉션에 대한 나만의 설명을 적어주세요</p>\n                    <textarea \n                        className=\"nameInput\" \n                        value={desc} \n                        onChange={(e) => {setDesc(e.currentTarget.value)}}\n                        autoSize={{ minRows: 3, maxRows: 5 }}\n                        placeholder=\"설명을 작성해주세요\"\n                    ></textarea>\n                    <div style={{marginTop:'10%'}}>\n                    <p className=\"inputLabel\" style={{fontSize:\"15px\"}}>갤러리의 타입을 선택해주세요</p>\n                    <Select\n                        closeMenuOnSelect={false}\n                        components={animatedComponents}\n                        options={typeSelect} \n                        onChange={changeTypes}\n                        isMulti\n                    />\n                        {/* <Select options={types} onChange={e => {setType(e.label); console.log(e.label)}} /> */}\n                    </div>\n                    <div style={{marginTop:'10%'}}>\n                        <p className=\"inputLabel\" style={{fontSize:\"15px\"}}>나의 공간의 메인 색상을 정해보세요</p>\n                        <input type=\"color\" value={color} onChange={e => setColor(e.currentTarget.value)}/>\n                    </div>\n                    <div>\n                    <button className=\"inputButton\" onClick={submitGallery}>등록하기</button>\n                    </div>\n                </form>\n            </div>\n        </div>\n    )\n}\n\nexport default MakeGallery\n","import React, {useState, useEffect} from 'react'\nimport {app, authService} from '../../tools/fbase';\nimport {dbService } from '../../tools/fbase'\nimport MakeGallery from './Sections/MakeGallery';\nimport {useHistory} from 'react-router-dom'\nimport Select from 'react-select'\nimport {typeSelect} from '../../tools/types'\nimport makeAnimated from 'react-select/animated';\nimport Picker, { SKIN_TONE_MEDIUM_DARK } from \"emoji-picker-react\";\nimport './Sections/MakeGallery.css'\n\nconst style = {\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n    width: 300,\n    bgcolor: 'background.paper',\n    borderRadius: '15px',\n    border: '1px solid rgba(0,0,0,0.1)',\n    boxShadow: 24,\n    p: 4,\n};\n\nconst ProfilePage = (props) => {\n    // 아직 갤러리를 만들지 않은 상태면 만들게 해야한다.\n    // 갤러리를 만든 상태라면 불러온다.\n\n    const User = authService.currentUser;\n    const [userName, setUserName] = useState(props.userObj.displayName);\n    const [galleryName, setGalleryName] = useState(\"\");\n    const [galleryDesc, setGalleryDesc] = useState(\"\");\n    const [galleryColor, setGalleryColor] = useState(\"\");\n    const [galleryLeftColor, setGalleryLeftColor] = useState(\"\");\n    const [galleryRightColor, setGalleryRightColor] = useState(\"\");\n    const [galleryTypes, setGalleryTypes] = useState([]);\n    const [hasGallery, setHasGallery] = useState(true);\n    const [loading, setLoading] = useState(false);\n    const [myCollections, setMyCollections] = useState([]);\n    const [myGallery, setMyGallery] = useState([]);\n    const [open, setOpen] = useState(false);\n    const [update, setUpdate] = useState(false);\n    const [typess, setTypess] = useState([]);\n    const [chosenEmoji, setChosenEmoji] = useState(null);\n    const [showemoji, setShowemoji] = useState(\"none\");\n    \n    const onEmojiClick = (event, emojiObject) => {\n        setChosenEmoji(emojiObject);\n        setGalleryName(emojiObject.emoji + galleryName);\n      };\n\n    const showEmojiSelect = () => {\n        if(showemoji === 'none') {setShowemoji('flex')}\n        else{setShowemoji('none')}\n    }\n\n    const getMyCollections = async () => {\n        const mydatas = await dbService\n            .collection(\"collections\")\n            .where(\"creatorId\", \"==\", props.userObj.uid)\n            .get(); // uid를 creatorId로 줬었으니까.\n        setMyCollections(mydatas.docs.map(doc => doc.data()));\n    }\n\n    // 갤러리 정보를 수정\n    const getMyGallery = async () => {\n        const myGalleryData = await dbService\n            .collection(\"users\")\n            .where(\"userId\", \"==\", props.userObj.uid)\n            .get(); // uid를 creatorId로 줬었으니까.\n        let myGallery = myGalleryData.docs.map(doc => {return({...doc.data(), id:doc.id})})\n        setHasGallery(myGallery.length > 0);\n        setMyGallery(myGallery[0]);\n        if(myGallery.length > 0){\n            await getMyCollections();\n            setGalleryName(myGallery[0].galleryName);\n            setGalleryDesc(myGallery[0].desc);\n            setGalleryColor(myGallery[0].color);\n            setGalleryTypes(myGallery[0].typess);\n            setGalleryLeftColor(myGallery[0].left_color);\n            setGalleryRightColor(myGallery[0].right_color);\n        }else{\n            setMyCollections([]);\n        }\n        setLoading(true);\n    }\n\n    useEffect(() => {\n        if(User === null){\n            alert(\"로그인 하셔야 합니다.\")\n        }\n        getMyGallery();\n    },[update])\n\n    const changeGalleryInto = async e => {\n        e.preventDefault();\n        if(props.userObj.displayName !== userName){\n            // 이러면 업데이트\n            await props.userObj.updateProfile({\n                displayName: userName,\n             });\n        }\n        await dbService.doc(`users/${myGallery.id}`)\n        .update({\n            color:galleryColor,\n            desc:galleryDesc,\n            galleryName:galleryName,\n            displayName:userName\n        })\n        alert(\"수정이 완료되었습니다!\")\n        setUpdate(!update);\n    }\n\n\n    const changeTypes = e => {\n        let tts = [];\n        e.forEach(i => {\n            tts.push(i.label)\n        });\n\n        setTypess(tts)\n    }\n\n    if(hasGallery){\n        if(loading){\n            return (\n                <div className=\"uploadcontainer\">\n                    <div className=\"uploadIncontainer\">\n                        <form onSubmit={changeGalleryInto}>\n                            <p className=\"thanks\"> 갤러리 정보 수정하기 </p>\n                            <p className=\"add-thanks\">내 정보 및 갤러리 정보 수정</p>\n\n        \n                            <p className=\"inputLabel\">닉네임을 설정하세요</p>\n                            <input \n                                className=\"nameInput\" \n                                value={userName} \n                                onChange={(e) => {setUserName(e.currentTarget.value)}}\n                                autoSize={{ minRows: 3, maxRows: 5 }}\n                                placeholder=\"닉네임 설정하기\"\n                            ></input>\n\n                            <p className=\"inputLabel\">갤러리 이름</p>\n                            <p className=\"inputLabel\">ex. 🗽방구석 호그와트</p>\n        \n                            <div style={{display:`${showemoji}`}}>\n                                <Picker\n                                    onEmojiClick={onEmojiClick}\n                                    disableAutoFocus={true}\n                                    groupNames={{ smileys_people: \"PEOPLE\" }}\n                                    native\n                                />\n                            </div>\n                            <span onClick={showEmojiSelect} className=\"emojiSelect\" >이모지 선택</span>\n                            <input autoSize={{ minRows: 1, maxRows: 2 }} placeholder=\"갤러리 이름\" \n                                className=\"nameInput\" \n                                value={galleryName} \n                                onChange={(e) => {setGalleryName(e.currentTarget.value)}}>\n                            </input>\n        \n                            <p className=\"inputLabel\">컬렉션에 대한 나만의 설명을 적어주세요</p>\n                            <textarea \n                                className=\"nameInput\" \n                                value={galleryDesc} \n                                onChange={(e) => {setGalleryDesc(e.currentTarget.value)}}\n                                autoSize={{ minRows: 3, maxRows: 5 }}\n                                placeholder=\"설명을 작성해주세요\"\n                            ></textarea>\n                            <div style={{marginTop:'10%'}}>\n                            <p className=\"inputLabel\" style={{fontSize:\"15px\"}}>갤러리의 타입을 선택해주세요</p>\n                            {/* <Select\n                                closeMenuOnSelect={false}\n                                components={animatedComponents}\n                                options={typeSelect} \n                                onChange={changeTypes}\n                                isMulti\n                            /> */}\n                                {/* <Select options={types} onChange={e => {setType(e.label); console.log(e.label)}} /> */}\n                            </div>\n                            <div style={{marginTop:'10%'}}>\n                                <p className=\"inputLabel\" style={{fontSize:\"15px\"}}>나의 공간의 메인 색상을 정해보세요</p>\n                                <input type=\"color\" value={galleryColor} onChange={e => setGalleryColor(e.currentTarget.value)}/>\n                            </div>\n                            <div style={{marginTop:'10%'}}>\n                                <p className=\"inputLabel\" style={{fontSize:\"15px\"}}>나의 공간의 배경 색상을 정해보세요</p>\n                                <input type=\"color\" value={galleryLeftColor} onChange={e => setGalleryLeftColor(e.currentTarget.value)}/>\n                                <input type=\"color\" value={galleryRightColor} onChange={e => setGalleryRightColor(e.currentTarget.value)}/>\n                            </div>\n                            <div>\n                            <button className=\"inputButton\" onClick={changeGalleryInto}>등록하기</button>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n            )\n        }else{\n            return(\n            <div>Loading...</div>\n            )\n        }\n    }else{\n        return(\n            <MakeGallery userObj={props.userObj}/>\n        )\n    }\n}\n\nexport default ProfilePage\n","import React, {useState} from 'react'\nimport './Sections/UploadPage.css'\nimport Button from '@material-ui/core/Button';\nimport { Input } from 'antd';\nimport { dbService } from '../../tools/fbase'\nimport { stService } from '../../tools/fbase'\nimport { v4 as uuidv4 } from 'uuid';\nimport Select from 'react-select'\nimport { typeSelect } from '../../tools/types'\n\nconst { TextArea } = Input;\n\n\nfunction UploadPage({userObj}) {\n    const [title, setTitle] = useState(\"\")\n    const [desc, setDesc] = useState(\"\")\n    const [attachment, setAttachment] = useState(\"\")\n    const [type, setType] = useState(\"all\")\n\n    const submit = async (e) => {\n        e.preventDefault();\n        console.log(\"Asdqw\");\n        if( title.length < 2 || desc.length < 2){\n            alert('3글자 이상 입력해주세요.')\n            return\n        } \n        // 사진을 먼저 업로드하고 그 URL을 받아서 데이터로 넣어줘야한다.\n        const attachmentRef = stService.ref().child(`${userObj.uid}/${uuidv4()}`)\n        const response = await attachmentRef.putString(attachment, \"data_url\");\n        const attachmentURL = await response.ref.getDownloadURL();\n        const collectionOne = {\n            title,\n            desc,\n            created:Date(),\n            creatorId:userObj.uid, // uid가 아이디를 뜻함.\n            attachmentURL:attachmentURL,\n            like_num:0,\n            comment_num:0,\n            type:type\n        };\n\n        await dbService.collection(\"collections\").add(collectionOne);\n\n        let gallery;\n        const dbGal = await dbService.collection(\"users\")\n        .where(\"userId\", \"==\", userObj.uid)\n        .get();\n        \n        gallery = dbGal.docs.map(doc => {return({...doc.data(), id:doc.id})})\n\n        await dbService.doc(`users/${gallery[0].id}`)\n        .update({collection_num : gallery[0].collection_num+1})\n\n        // uploadDataSave.push({\n        //     \"서비스 명\" : title,\n        //     \"설명 \" : desc,\n        //     \"이유\":reason,\n        // });\n        // localStorage.setItem(\"id\", title)\n        alert(\"컬렉션 등록이 완료되었습니다.\")\n        setTitle(\"\")\n        setDesc(\"\")\n        setAttachment(\"\")\n        return;\n    }\n\n    const onFileChange = (e) => {\n        const {target:{files},} = e;\n        const oneFile = files[0];\n        const reader = new FileReader();\n        reader.onloadend = (finishedEvent) => { // 로딩이 끝날 때 실행한다는 뜻.\n            const {currentTarget:{result}} = finishedEvent;\n            setAttachment(result);\n        }\n        reader.readAsDataURL(oneFile);\n    }\n\n    return (\n        <div className=\"uploadcontainer\">\n            <div className=\"uploadIncontainer\">\n                <form onSubmit={submit}>\n                    <p className=\"thanks\"> 내 컬렉션 등록하기 </p>\n                    <p className=\"add-thanks\">나만의 소중한 컬렉션을 남들과 공유해보세요</p>\n                    <p className=\"inputLabel\">제목</p>\n                    <input autoSize={{ minRows: 1, maxRows: 2 }} placeholder=\"이름\" className=\"nameInput\" value={title} onChange={(e) => {setTitle(e.currentTarget.value)}}></input>\n\n                    <p className=\"inputLabel\">컬렉션에 대한 나만의 설명을 적어주세요</p>\n                    <textarea \n                        className=\"nameInput\" \n                        value={desc} \n                        onChange={(e) => {setDesc(e.currentTarget.value)}}\n                        placeholder=\"설명을 작성해주세요\"\n                        style={{paddingTop:'10px'}}\n                    ></textarea>\n                    <div style={{marginTop:'10%'}}>\n                    <p className=\"inputLabel\" style={{fontSize:\"15px\"}}>컬렉션의 종류를 선택해주세요</p>\n                        <Select options={typeSelect} onChange={e => {setType(e.label); console.log(e.label)}} style={{color:'black'}}/>\n                    </div>\n\n                    <div style={{marginTop:'10%'}}>\n                    <input type=\"file\" accept=\"image/*\" className=\"file-input\" onChange={onFileChange}/>\n                    {attachment && \n                    <div>\n                        <img src={attachment} className=\"col-image\"/>\n                    </div>}\n                    </div>\n                    \n                    {/* <p className=\"inputLabel\">왜 남들에게 추천하고 싶으신가요?</p>\n                    <TextArea \n                        className=\"nameInput\" \n                        value={reason} \n                        onChange={(e) => {setReason(e.currentTarget.value)}}\n                        autoSize={{ minRows: 1, maxRows: 3 }}\n                        placeholder=\"Any reason\"\n                    ></TextArea> */}\n                    <div>\n                    <button className=\"inputButton\" onClick={submit}>등록하기</button>\n                    </div>\n                </form>\n            </div>\n        </div>\n    )\n}\n\nexport default UploadPage\n","import React, {useState} from 'react'\nimport './Sections/UploadPage.css'\nimport Button from '@material-ui/core/Button';\nimport { Input } from 'antd';\nimport { dbService } from '../../tools/fbase'\nimport { stService } from '../../tools/fbase'\nimport { v4 as uuidv4 } from 'uuid';\nimport Select from 'react-select'\nimport {types} from '../../tools/types'\nimport {typeSelect} from '../../tools/types'\nimport {categories} from '../../tools/types'\n\n\nconst InformationUpload = ({userObj}) =>  {\n    const [title, setTitle] = useState(\"\")\n    const [desc, setDesc] = useState(\"\")\n    const [type, setType] = useState(\"\")\n    const [category, setCategory] = useState(\"\")\n\n    const submit = async (e) => {\n        e.preventDefault();\n\n        if( title.length < 3 || desc.length < 3){\n            alert('3글자 이상 입력해주세요.')\n            return\n        } \n\n        // 사진을 먼저 업로드하고 그 URL을 받아서 데이터로 넣어줘야한다.\n        const InformationOne = {\n            title,\n            desc,\n            created:Date(),\n            creatorId:userObj.uid, // uid가 아이디를 뜻함.\n            like_num:0,\n            comment_num:0,\n            displayName:userObj.displayName,\n            type:type,\n            category:category,\n        };\n\n        await dbService.collection(\"informations\").add(InformationOne);\n        \n        alert(\"질문 등록이 완료되었습니다.\")\n        setTitle(\"\")\n        setDesc(\"\")\n        return;\n    }\n\n    return (\n        <div className=\"uploadcontainer\">\n            <div className=\"uploadIncontainer\">\n                <form onSubmit={submit}>\n                    <p className=\"thanks\"> 🍯 꿀팁 공유하기 </p>\n                    <p className=\"add-thanks\">어디서도 찾기힘든 정보를 다른사람들과 공유하세요</p>\n                    <p className=\"inputLabel\">제목</p>\n                    <input autoSize={{ minRows: 1, maxRows: 2 }} placeholder=\"이름\" className=\"nameInput1\" value={title} onChange={(e) => {setTitle(e.currentTarget.value)}}></input>\n\n                    <p className=\"inputLabel\">내용</p>\n                    <textarea \n                        className=\"nameInput\" \n                        value={desc} \n                        onChange={(e) => {setDesc(e.currentTarget.value)}}\n                        placeholder=\"설명을 작성해주세요\"\n                        style={{paddingTop:'10px'}}\n                    ></textarea>\n                    <div className=\"selections\">\n                        <div style={{width: '49%', marginTop:'-10px'}}>\n                            <p className=\"input-label-select\" style={{fontSize:\"15px\"}}>컬렉션의 종류를 선택해주세요</p>\n                            <Select options={typeSelect} onChange={e => {setType(e.label); console.log(e.label)}} style={{color:'black'}}/>\n                        </div>                  \n                        <div style={{width: '49%', marginTop:'-10px', marginLeft:'1%'}}>\n                            <p className=\"input-label-select\" style={{fontSize:\"15px\"}}>정보의 종류를 선택해주세요</p>\n                            <Select options={categories} onChange={e => {setCategory(e.label); console.log(e.label)}} style={{color:'black'}}/>\n                        </div>\n                    </div>\n\n                    <div>\n                    <button className=\"inputButton\" onClick={submit}>등록하기</button>\n                    </div>\n                </form>\n            </div>\n        </div>\n    )\n}\n\nexport default InformationUpload\n","import React, {useState} from 'react'\nimport './Sections/UploadPage.css'\nimport Button from '@material-ui/core/Button';\nimport { Input } from 'antd';\nimport { dbService } from '../../tools/fbase'\nimport { stService } from '../../tools/fbase'\nimport { v4 as uuidv4 } from 'uuid';\nimport Select from 'react-select'\nimport {typeSelect} from '../../tools/types'\nimport {categories} from '../../tools/types'\n\nconst QnAUpload = ({userObj}) =>  {\n    const [title, setTitle] = useState(\"\")\n    const [desc, setDesc] = useState(\"\")\n    const [type, setType] = useState(\"\")\n    const [category, setCategory] = useState(\"\")\n\n    const submit = async (e) => {\n        e.preventDefault();\n\n        if( title.length < 3 || desc.length < 3){\n            alert('3글자 이상 입력해주세요.')\n            return\n        } \n\n        // 사진을 먼저 업로드하고 그 URL을 받아서 데이터로 넣어줘야한다.\n        const QnAOne = {\n            title,\n            desc,\n            created:Date(),\n            creatorId:userObj.uid, // uid가 아이디를 뜻함.\n            like_num:0,\n            comment_num:0,\n            displayName:userObj.displayName,\n            type:type,\n            category:category,\n        };\n\n        await dbService.collection(\"qnas\").add(QnAOne);\n        \n        alert(\"질문 등록이 완료되었습니다.\")\n        setTitle(\"\")\n        setDesc(\"\")\n        return;\n    }\n\n    return (\n        <div className=\"uploadcontainer\">\n            <div className=\"uploadIncontainer\">\n                <form onSubmit={submit}>\n                    <p className=\"thanks\"> 질문하기 </p>\n                    <p className=\"add-thanks\">어디서도 찾기힘든 정보를 질문하세요</p>\n                    <p className=\"inputLabel\">제목</p>\n                    <input autoSize={{ minRows: 1, maxRows: 2 }} placeholder=\"이름\" className=\"nameInput1\" value={title} onChange={(e) => {setTitle(e.currentTarget.value)}}></input>\n\n                    <p className=\"inputLabel\">컬렉션에 대한 나만의 설명을 적어주세요</p>\n                    <textarea \n                        className=\"nameInput\" \n                        value={desc} \n                        onChange={(e) => {setDesc(e.currentTarget.value)}}\n                        placeholder=\"설명을 작성해주세요\"\n                        style={{paddingTop:'10px'}}\n                    ></textarea>\n                    <div className=\"selections\">\n                        <div style={{width: '49%', marginTop:'-10px'}}>\n                            <p className=\"input-label-select\" style={{fontSize:\"15px\"}}>컬렉션의 종류를 선택해주세요</p>\n                            <Select options={typeSelect} onChange={e => {setType(e.label); console.log(e.label)}} style={{color:'black'}}/>\n                        </div>                  \n                        <div style={{width: '49%', marginTop:'-10px', marginLeft:'1%'}}>\n                            <p className=\"input-label-select\" style={{fontSize:\"15px\"}}>질문의 종류를 선택해주세요</p>\n                            <Select options={categories} onChange={e => {setCategory(e.label); console.log(e.label)}} style={{color:'black'}}/>\n                        </div>\n                    </div>\n\n                    <div>\n                    <button className=\"inputButton\" onClick={submit}>등록하기</button>\n                    </div>\n                </form>\n            </div>\n        </div>\n    )\n}\n\nexport default QnAUpload\n","import React, {useState, useEffect} from 'react'\nimport './Sections/QnAPage.css'\nimport Button from '@mui/material/Button';\nimport {Input} from 'antd'\nimport { dbService } from '../../tools/fbase';\nimport {authService} from '../../tools/fbase';\nimport CommentContainer from '../../tools/CommentContainer';\nimport { Link } from 'react-router-dom'\n\nconst QnAPage = (props) => {\n    const User = authService.currentUser;\n    const [update, setUpdate] = useState(false);\n    const [qna, setQna] = useState({});\n    const [info, setInfo] = useState({});\n    const [loading, setLoading] = useState(false);\n\n    const getThisQnA = async () => {\n        let data;\n        const dbqna = await dbService\n        .collection(\"qnas\")\n        .doc(props.match.params.id)\n        .get()\n        .then(snapshot => data = {...snapshot.data(), id:snapshot.id})\n\n        const dbgallery = await dbService\n            .collection(\"users\")\n            .where(\"userId\", \"==\", data.creatorId)\n            .get()\n        \n        let dbgal = dbgallery.docs.map(doc => {return({...doc.data(), gal_id:doc.id})})\n        \n        setQna({...data, galId:dbgal[0].gal_id, galleryName:dbgal[0].galleryName, displayName:dbgal[0].displayName})\n\n        setLoading(true);\n        //     // set이 붙는 함수를 쓸 때 값이 아니라 함수를 전달할 수 있다.\n    }\n\n    const getThisQnaInfo = async () => {\n        if(loading){\n            const dbinfos = await dbService.collection(\"users\")\n            .where(\"userId\", \"==\", qna.creatorId)\n            .get();\n\n            let dbinfo = dbinfos.docs.map(doc => {return({...doc.data(), id:doc.id})})\n            setInfo(dbinfo[0]);\n        }\n    }\n\n    useEffect(() => {\n        getThisQnA();\n        getThisQnaInfo();\n    },[update, loading])\n\n    return (\n        <div className=\"QnAContainer\">\n            <div className=\"QnAInfo\">\n                <div className=\"top-container\">\n                    <span className=\"qna\">QnA</span>\n                    <span className=\"ask\">\n                        <div style={{paddingLeft:'2%'}}>\n                            <span style={{fontSize:'13px', color:'rgb(255,255,255,0.8)'}}>무엇이 궁금한가요?</span>\n                        </div>\n                        <div>\n                            <span style={{fontSize:'14px', marginLeft:'4%'}}>{qna.type}</span><span style={{marginLeft:'0px', color:'rgb(255,255,255,0.8)', fontSize:'13px'}}>에 관한 질문</span>\n                            <span style={{fontSize:'14px', marginLeft:'1%'}}>{qna.category}</span><span style={{marginLeft:'0px', color:'rgb(255,255,255,0.8)', fontSize:'13px'}}>가 궁금해요</span>\n                        </div>\n                    </span>\n                </div>\n                <div className=\"title-container\">\n                    <div className=\"box-title\">질문 제목</div>\n                    <div className=\"box-body\">{qna.title}</div>\n                </div>\n                <div className=\"desc-container\">\n                    <div className=\"box-title\">질문 내용</div>\n                    <div className=\"box-body\">{qna.desc}</div>\n                </div>\n                <div className=\"info-container\">\n                    <Link to={{\n                        pathname:`/gallery/${qna.galId}`\n                    }} className=\"galleryName\">{info.galleryName}</Link>\n                    <span className=\"displayName\">{info.displayName} 님의 질문</span>\n                </div>\n            </div>\n            {/* 댓글을 달고 보여주는 공간 */}\n            {/* <div style={{width:'100%'}}> */}\n                { loading && <CommentContainer category=\"qna_comments\" contentId={qna.id} userId={qna.userId} contentLikeNum={qna.comment_num} />}\n            {/* </div> */}\n        </div>\n    )\n}\n\nexport default QnAPage\n","import React, {useState, useEffect} from 'react'\nimport './Sections/QnAPage.css'\nimport Button from '@mui/material/Button';\nimport {Input} from 'antd'\nimport { dbService } from '../../tools/fbase';\nimport {authService} from '../../tools/fbase';\nimport CommentContainer from '../../tools/CommentContainer';\nimport { Link } from 'react-router-dom'\n\nconst InformationPage = (props) => {\n    const User = authService.currentUser;\n    const [update, setUpdate] = useState(false);\n    const [information, setInformation] = useState({});\n    const [info, setInfo] = useState({});\n    const [loading, setLoading] = useState(false);\n\n    useEffect(() => {\n        getThisInformation();\n        getThisQnaInfo();\n    },[update, loading])\n\n    const getThisInformation = async () => {\n        let data;\n        const dbinfo = await dbService\n        .collection(\"informations\")\n        .doc(props.match.params.id)\n        .get()\n        .then(snapshot => data = {...snapshot.data(), id:snapshot.id})\n\n        const dbgallery = await dbService\n            .collection(\"users\")\n            .where(\"userId\", \"==\", data.creatorId)\n            .get()\n        \n        let dbgal = dbgallery.docs.map(doc => {return({...doc.data(), gal_id:doc.id})})\n        \n        setInformation({...data, galId:dbgal[0].gal_id, galleryName:dbgal[0].galleryName, displayName:dbgal[0].displayName})\n\n        setLoading(true);\n        //     // set이 붙는 함수를 쓸 때 값이 아니라 함수를 전달할 수 있다.\n    }\n\n    const getThisQnaInfo = async () => {\n        if(loading){\n            const dbinfos = await dbService.collection(\"users\")\n            .where(\"userId\", \"==\", information.creatorId)\n            .get();\n\n            let dbinfo = dbinfos.docs.map(doc => {return({...doc.data(), id:doc.id})})\n            setInfo(dbinfo[0]);\n        }\n    }\n\n\n    const addLike = async () => {\n        // 좋아요를 누른 적 있는지 체크해야한다.\n        const dbLike = await dbService\n            .collection(\"informations_like\")\n            .where(\"creatorId\", \"==\", User.uid)\n            .where(\"informationId\", \"==\", information.id)\n            .get();\n        const db_like = dbLike.docs.map(doc => {return({...doc.data(), id:doc.id})});\n        console.log(\"dbLike\", db_like)\n\n        if(db_like.length === 0){\n            const likeOne = {\n                creatorId: User.uid,\n                informationId: information.id\n            }\n            await dbService.collection(\"informations_like\").add(likeOne)\n\n            await dbService.doc(`informations/${information.id}`).update({\n                like_num:information.like_num + 1,\n            });\n            alert(\"I like it!\");\n            setUpdate(!update);\n        }else{\n            alert(\"이미 좋아요를 눌렀습니다.\")\n        }\n    }\n    return (\n        <div className=\"QnAContainer\">\n            <div className=\"QnAInfo\">\n                <div className=\"top-container\">\n                    <span className=\"qna\">정보</span>\n                    <span className=\"ask\">\n                        <div style={{paddingLeft:'2%'}}>\n                            <span style={{fontSize:'13px', color:'rgb(255,255,255,0.8)'}}>무엇에 관한 정보인가요?</span>\n                        </div>\n                        <div>\n                            <span style={{fontSize:'14px', marginLeft:'4%'}}>{information.type}</span><span style={{marginLeft:'0px', color:'rgb(255,255,255,0.8)', fontSize:'13px'}}>의</span>\n                            <span style={{fontSize:'14px', marginLeft:'1%'}}>{information.category}</span><span style={{marginLeft:'0px', color:'rgb(255,255,255,0.8)', fontSize:'13px'}}>에 관한 정보</span>\n                        </div>\n                    </span>\n                </div>\n                <div className=\"title-container\">\n                    <div className=\"box-title\">제목</div>\n                    <div className=\"box-body\">{information.title}</div>\n                </div>\n                <div className=\"desc-container\">\n                    <div className=\"box-title\">정보 내용</div>\n                    <div className=\"box-body\">{information.desc}</div>\n                </div>\n                <div className=\"num-of-like\" >\n                    {information.like_num}명이 유용하다고 평가했습니다.\n                </div>\n                <div className=\"info-container\">\n                    <span onClick={addLike} className=\"galleryName\">유용한 정보라면 클릭!</span>\n                    <Link to={{\n                        pathname:`/gallery/${information.galId}`\n                    }}  className=\"displayName\">{info.displayName} 님이 공유↗</Link>\n                </div>\n            </div>\n            {/* 댓글을 달고 보여주는 공간 */}\n            {/* <div style={{width:'100%'}}> */}\n                { loading && <CommentContainer category=\"i_comments\" contentId={information.id} userId={information.userId} contentLikeNum={information.comment_num} />}\n            {/* </div> */}\n        </div>\n    )\n}\n\nexport default InformationPage\n","import React, {useState, useEffect} from 'react'\nimport {useHistory} from 'react-router-dom'\nimport './Sections/CollectionPage.css'\nimport CommentContainer from '../../tools/CommentContainer'\nimport {dbService} from '../../tools/fbase'\nimport Button from '@mui/material/Button';\nimport {authService} from '../../tools/fbase';\nimport {types} from '../../tools/types'\nimport { Link } from 'react-router-dom'\nimport * as FaIcons from 'react-icons/fa';\n\nconst CollectionPage = (props) => {\n    // const history = useHistory();\n    const [item, setItem] = useState({});\n    const [loading, setLoading] = useState(false);\n    const [update, setUpdate] = useState(false);\n    const User = authService.currentUser;\n\n    const getThisCollection = async () => {\n        let dbcol;\n        const dbCollection = await dbService\n            .collection(\"collections\")\n            .doc(props.match.params.id)\n            .get()\n            .then(snapshot => dbcol = {...snapshot.data(), id:snapshot.id})\n        const dbgallery = await dbService\n            .collection(\"users\")\n            .where(\"userId\", \"==\", dbcol.creatorId)\n            .get()\n        let dbgal = dbgallery.docs.map(doc => {return({...doc.data(), gal_id:doc.id})})\n        setItem({...dbcol, galId:dbgal[0].gal_id, galleryName:dbgal[0].galleryName, displayName:dbgal[0].displayName})\n        setLoading(true);\n        //     // set이 붙는 함수를 쓸 때 값이 아니라 함수를 전달할 수 있다.\n    }\n\n    useEffect(() => {\n        getThisCollection();\n    },[update])\n\n    const addLike = async () => {\n        // 좋아요를 누른 적 있는지 체크해야한다.\n        const dbLike = await dbService\n            .collection(\"collections_like\")\n            .where(\"creatorId\", \"==\", User.uid)\n            .where(\"collectionId\", \"==\", item.id)\n            .get();\n        const db_like = dbLike.docs.map(doc => {return({...doc.data(), id:doc.id})});\n        console.log(\"dbLike\", db_like)\n\n        if(db_like.length === 0){\n            const likeOne = {\n                creatorId: User.uid,\n                collectionId: item.id\n            }\n            await dbService.collection(\"collections_like\").add(likeOne)\n\n            await dbService.doc(`collections/${item.id}`).update({\n                like_num:item.like_num + 1,\n            });\n            alert(\"I like it!\");\n            setUpdate(!update);\n        }else{\n            alert(\"이미 좋아요를 눌렀습니다.\")\n        }\n    }\n\n    return (\n        <div className=\"one-collection-container\">\n            <div className=\"one-collection-body\">\n                <div className=\"collection-top\">\n                    <div className=\"gallery-name\">\n                        <Link to={{\n                            pathname:`/gallery/${item.galId}`\n                        }} className=\"gallery-link\">{item.galleryName} ↗</Link>\n                    </div>\n                    <div className=\"collection-title-top\">\n                        <span className=\"collection-title\">{item.title}</span>\n                        <div style={{width:'20%', display:'flex', justifyContent:'end', paddingRight:'2%'}}>\n                            <span className=\"type-one\">{item.type}</span>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"image-container\">\n                    <img src={item.attachmentURL} className=\"image\" />\n                </div>\n                <div className=\"colection-desc\">\n                    <span className=\"desc-head\">설명</span>\n                    <span className=\"desc-body\">{item.desc}</span>\n                    <span className=\"like-container\">\n                        <div className=\"left-like-container\">\n                            <span className=\"more-button\">갤러리의 다른 컬렉션 둘러보기</span>\n                        </div>\n                        <span onClick={addLike} className=\"collection-like-button\">\n                            <FaIcons.FaRegHeart color=\"white\" size=\"30px\"/>\n                            <span className=\"like-desc\">{item.like_num}</span>\n                        </span>\n                    </span>\n                </div>\n            </div>\n            { loading && <CommentContainer category=\"c_comments\" contentId={item.id} contentLikeNum={item.comment_num}/> }\n        </div>\n    )\n}\n\nexport default CollectionPage\n","import React, {useState, useEffect} from 'react'\nimport { dbService } from '../../tools/fbase';\nimport {authService} from '../../tools/fbase';\nimport './Sections/LiksPage.css'\nimport {Link} from 'react-router-dom'\n\nconst LikePage = () => {\n    const [clikes, setClikes] = useState([])\n    const [glikes, setGlikes] = useState([])\n    const [qclikes, setQclikes] = useState([])\n    const [loading, setLoading] = useState(true)\n    const User = authService.currentUser;\n\n    const getCollectionLikes = async () => {\n        const dbCollection = await dbService.collection(\"collections_like\")\n        .where(\"creatorId\", \"==\", User.uid)\n        .get();\n\n        let clikeList = dbCollection.docs.map(doc => {return({...doc.data(), id:doc.id})})\n        clikeList.map(async (item, index) => {\n            await dbService.collection(\"collections\")\n            .doc(item.collectionId)\n            .get()\n            .then(snapshot => {setClikes([...clikes, {...snapshot.data(), id:snapshot.id}])})\n        })\n    }\n    const getGalleryLikes = async () => {\n        const dbGallery = await dbService.collection(\"users_like\")\n        .where(\"creatorId\", \"==\", User.uid)\n        .get();\n\n        let glikeList = dbGallery.docs.map(doc => {return({...doc.data(), id:doc.id})});\n\n        glikeList.map(async (item, index) => {\n            await dbService.collection(\"users\")\n            .doc(item.galleryId)\n            .get()\n            .then(snapshot => {setGlikes([...glikes, {...snapshot.data(), id:snapshot.id}])})\n        })\n    }\n    const getQnaCommentLikes = async () => {\n        const dbQna = await dbService.collection(\"qna_comments_like\")\n        .where(\"creatorId\", \"==\", User.uid)\n        .get();\n\n        setQclikes(dbQna.docs.map(doc => {return({...doc.data(), id:doc.id})}));\n        setLoading(false);\n    }\n\n    useEffect(() => {\n        setGlikes([]);\n        setClikes([]);\n        getCollectionLikes();\n        getGalleryLikes();\n        getQnaCommentLikes();\n    },[loading])\n\n    const glikesTable = glikes.map((item, index) => {\n\n        return(\n            <Link to={{\n                pathname:`gallery/${item.id}`\n            }}  key={index} className=\"gallery-like-one\">\n                <span className=\"gallery_owner\"><span className=\"gangjo\">{item.displayName}</span>님의 갤러리</span>\n                <span className=\"likes-gallery-name\">{item.galleryName}\n                </span>\n                <div className=\"gallery-info\">\n                    <span><span className=\"gangjo\">{item.collection_num}</span> 개의 컬렉션 | </span>\n                    <span><span className=\"gangjo\">{item.like_num}</span> 개의 좋아요</span>\n                </div>\n            </Link>\n        )\n    })\n    const clikesTable = clikes.map((item, index) => {\n        return(\n            <Link to={{\n                pathname:`CollectionPage/${item.id}`\n            }}  key={index} className=\"gallery-like-one\">\n                {/* <span className=\"gallery_owner\"><span className=\"gangjo\">{item.displayName}</span>님의 갤러리</span> */}\n                <span className=\"likes-gallery-name\">\n                    {item.title}\n                </span>\n                <span className=\"likes-type\">{item.type}</span>\n                <div className=\"gallery-info\">\n                    <span><span className=\"gangjo\">{item.comment_num}</span> 개의 댓글 | </span>\n                    <span><span className=\"gangjo\">{item.like_num}</span> 개의 좋아요</span>\n                </div>\n            </Link>\n        )\n    })\n\n    return (\n        <div className=\"my-like-container\">\n            <div className=\"my-like-back\">\n                <div className=\"like-title\">\n                    <p>\n                        좋아요한 것들 목록이 쭉 나온다.\n                    </p>\n                </div>\n                <div style={{width:'80%'}}>\n                    <p className=\"info-title\">갤러리 좋아요 한 것들</p>\n                    {!loading && <>\n                        {glikesTable}\n                    </>}\n                </div>\n                <div style={{width:'80%'}}>\n                    <p className=\"info-title\">컬렉션 좋아요 한 것들</p>\n                    {!loading && <>\n                        {clikesTable}\n                    </>}\n                </div>\n                <div style={{width:'80%'}}>\n                    <p className=\"info-title\">QnA 답변에 좋아요 한 것들</p>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default LikePage\n","import React from 'react'\nimport {useState, useEffect} from 'react'\nimport { Link } from 'react-router-dom';\nimport * as FaIcons from 'react-icons/fa';\nimport { dbService } from '../../tools/fbase';\nimport CollectionCard from '../LandingPage/Sections/CollectionCard'\nimport { types } from '../../tools/types'\nimport Button from '@mui/material/Button';\nimport {firebaseInstance, authService, GoogleAuthProvider} from '../../tools/fbase';\nimport './All.css'\n\nfunction AllCollections() {\n    const [collections, setCollections] = useState([]);\n    const [type, setType] = useState(\"전체\");\n    const [loading, setLoading] = useState(false);\n\n    const getRealAllCollections = async () => {\n        const collectionDatas = await dbService\n            .collection(\"collections\")\n            .orderBy(\"like_num\", \"desc\")\n            .get(); // uid를 creatorId로 줬었으니까.\n        let collectionData = collectionDatas.docs.map(doc => {\n            return({...doc.data(), id:doc.id})\n        });\n        if(type===\"전체\"){\n            setCollections(collectionData);\n        }else{\n            collectionData = collectionData.filter(item => item.type === type|| item.type === \"전체\")\n            setCollections(collectionData);\n        }\n        setLoading(true);\n    }\n\n    const collectionTable = collections.map((item, index) => {\n        return(\n            <CollectionCard item={item} key={index}/>\n        )\n    })\n\n    const typeTable = types.map((item, index) => {\n        let backColor = \"#060b26\"\n        if(item === type){\n            backColor = \"#ff0000\"\n        }\n        return(\n            <div className=\"typeOne\" key={index} style={{backgroundColor: `${backColor}`}}>\n                <Button onClick={() => {setType(item);}} style={{color:'white', fontSize:'12px'}}>{item}</Button>\n            </div>\n        )\n    })\n\n    useEffect(() => {\n        getRealAllCollections();\n    },[type])\n\n\n    if(loading){\n        return (\n            <div className=\"landingcontainer\">\n            <div className=\"all-table-title\">\n                    <span>전체 컬렉션들 입니다</span>\n            </div>\n\n            <div className=\"type-title\" style={{backgroundColor:'rgba(0,0,0,0)', color:'#060b26', marginTop:'1%'}}>\n                원하는 카테고리를 골라보세요.\n            </div>\n            <div className=\"type-table23\" style={{backgroundColor:'rgba(0,0,0,0)'}}>\n                {typeTable}\n            </div>\n\n\n            <div className=\"qna-table-container\">\n                <div className=\"landing-qna-table\">\n                    {collectionTable}\n                </div>\n            </div>\n\n        </div>\n        )\n    }else{\n        return(\n        <div>\n            로딩중..\n        </div>\n        )\n    }\n}\n\nexport default AllCollections\n","import React from 'react'\nimport {useState, useEffect} from 'react'\nimport GalleryCard from '../../tools/GalleryCard'\nimport { Link } from 'react-router-dom';\nimport * as FaIcons from 'react-icons/fa';\nimport { dbService } from '../../tools/fbase';\nimport { types } from '../../tools/types'\nimport Button from '@mui/material/Button';\nimport {firebaseInstance, authService, GoogleAuthProvider} from '../../tools/fbase';\nimport './All.css'\n\nfunction AllGalleries() {\n    const [galleries, setGalleries] = useState([]);\n    const [type, setType] = useState(\"전체\");\n    const [loading, setLoading] = useState(false);\n\n    const getAllCollections = async () => {\n        const galleryDatas = await dbService\n            .collection(\"users\")\n            .orderBy(\"like_num\", \"desc\")\n            .limit(12)\n            .get(); // uid를 creatorId로 줬었으니까.\n        let galleryData = galleryDatas.docs.map(doc => {\n            return({...doc.data(), id:doc.id})\n        });\n        if(type===\"전체\"){\n            setGalleries(galleryData.slice(0,6));\n        }else{\n            galleryData = galleryData.filter(item => item.typess.includes(type) || item.typess.includes(\"전체\"))\n            setGalleries(galleryData.slice(0,6));\n        }\n        setLoading(true);\n    }\n\n\n    const typeTable = types.map((item, index) => {\n        let backColor = \"#060b26\"\n        if(item === type){\n            backColor = \"#ff0000\"\n        }\n        return(\n            <div className=\"typeOne\" key={index} style={{backgroundColor: `${backColor}`}}>\n                <Button onClick={() => {setType(item);}} style={{color:'white', fontSize:'12px'}}>{item}</Button>\n            </div>\n        )\n    })\n\n    useEffect(() => {\n        getAllCollections();\n    },[type])\n\n    const galleryTable = galleries.map((item, index) => {\n        return(\n            <GalleryCard data={item} key={index}/>\n            )\n        })\n\n    if(loading){\n        return (\n            <div className=\"landingcontainer\">\n            <div className=\"all-table-title\">\n                    <span>전체 갤러리들 입니다</span>\n            </div>\n\n            <div className=\"type-title\" style={{backgroundColor:'rgba(0,0,0,0)', color:'#060b26', marginTop:'1%'}}>\n                원하는 카테고리를 골라보세요.\n            </div>\n            <div className=\"type-table23\" style={{backgroundColor:'rgba(0,0,0,0)'}}>\n                {typeTable}\n            </div>\n\n\n            <div className=\"qna-table-container\">\n                <div className=\"landing-qna-table\">\n                    {galleryTable}\n                </div>\n            </div>\n\n        </div>\n        )\n    }else{\n        return(\n        <div>\n            로딩중..\n        </div>\n        )\n    }\n}\n\nexport default AllGalleries\n","import React from 'react'\nimport {useState, useEffect} from 'react'\nimport QnACard from '../LandingPage/Sections/QnACard'\nimport { Link } from 'react-router-dom';\nimport * as FaIcons from 'react-icons/fa';\nimport { dbService } from '../../tools/fbase';\nimport { types } from '../../tools/types'\nimport { categorieslist } from '../../tools/types'\nimport Button from '@mui/material/Button';\nimport {firebaseInstance, authService, GoogleAuthProvider} from '../../tools/fbase';\nimport './All.css'\n\nfunction AllInformations() {\n    const [qnas, setQnas] = useState([]);\n    const [type, setType] = useState(\"전체\");\n    const [category, setCategory] = useState(\"전체\");\n    const [loading, setLoading] = useState(false);\n\n    useEffect(() => {\n        getAllQnAs();\n    },[type, category])\n\n    const getAllQnAs = async () => {\n        const qnaDatas = await dbService\n            .collection(\"qnas\")\n            .get(); // uid를 creatorId로 줬었으니까.\n\n        let qnaData = qnaDatas.docs.map(doc => {\n            return({...doc.data(), id:doc.id})\n        });\n        if(type===\"전체\" && category === \"전체\"){\n            setQnas(qnaData);\n        }else if(type !== \"전체\" && category === \"전체\"){\n            qnaData = qnaData.filter(item => item.type === type || item.type === \"전체\")\n            setQnas(qnaData);\n        }else if(type === \"전체\" && category !== \"전체\"){\n            qnaData = qnaData.filter(item => item.category === category || item.category === \"전체\")\n            setQnas(qnaData);\n        }else{\n            qnaData = qnaData.filter(item => item.type === type || item.type === \"전체\")\n            qnaData = qnaData.filter(item => item.category === category || item.category === \"전체\")\n            setQnas(qnaData);\n        }\n        setLoading(true);\n    }\n\n\n\n    const typeTable = types.map((item, index) => {\n        let backColor = \"#060b26\"\n        if(item === type){\n            backColor = \"#ff0000\"\n        }\n        return(\n            <div className=\"typeOne\" key={index} style={{backgroundColor: `${backColor}`}}>\n                <Button onClick={() => {setType(item);}} style={{color:'white', fontSize:'12px'}}>{item}</Button>\n            </div>\n        )\n    })\n    const categoryTable = categorieslist.map((item, index) => {\n        let backColor = \"#060b26\"\n        if(item === category){\n            backColor = \"#ff0000\"\n        }\n        return(\n            <div className=\"typeOne\" key={index} style={{backgroundColor: `${backColor}`}}>\n                <Button onClick={() => {setCategory(item);}} style={{color:'white', fontSize:'12px'}}>{item}</Button>\n            </div>\n        )\n    })\n\n\n    const qnaTable = qnas.map((item, index) => {\n        return(\n            <QnACard data={item} key={index} />\n        )\n    })\n\n    if(loading){\n        return (\n            <div className=\"landingcontainer\">\n            <div className=\"all-table-title\">\n                    <span>전체 갤러리들 입니다</span>\n            </div>\n\n            <div className=\"type-title\" style={{backgroundColor:'rgba(0,0,0,0)', color:'#060b26', marginTop:'1%'}}>\n                원하는 카테고리를 골라보세요.\n            </div>\n            <div className=\"type-table23\" style={{backgroundColor:'rgba(0,0,0,0)'}}>\n                {typeTable}\n            </div>\n\n            <div className=\"type-table23\" style={{backgroundColor:'rgba(0,0,0,0)'}}>\n                {categoryTable}\n            </div>\n\n\n            <div className=\"qna-table-container\">\n                <div className=\"landing-qna-table\">\n                    {qnaTable}\n                </div>\n            </div>\n\n        </div>\n        )\n    }else{\n        return(\n        <div>\n            로딩중..\n        </div>\n        )\n    }\n}\n\nexport default AllInformations\n","import React from 'react'\nimport {useState, useEffect} from 'react'\nimport InformationCard from '../LandingPage/Sections/InformationCard'\nimport { Link } from 'react-router-dom';\nimport * as FaIcons from 'react-icons/fa';\nimport { dbService } from '../../tools/fbase';\nimport { types } from '../../tools/types'\nimport { categorieslist } from '../../tools/types'\nimport Button from '@mui/material/Button';\nimport {firebaseInstance, authService, GoogleAuthProvider} from '../../tools/fbase';\nimport './All.css'\n\nfunction AllInformations() {\n    const [informations, setInformations] = useState([]);\n    const [type, setType] = useState(\"전체\");\n    const [category, setCategory] = useState(\"전체\");\n    const [loading, setLoading] = useState(false);\n\n    const getAllInformations = async () => {\n        const infoDatas = await dbService\n            .collection(\"informations\")\n            .get(); // uid를 creatorId로 줬었으니까.\n\n        let infoData = infoDatas.docs.map(doc => {\n            return({...doc.data(), id:doc.id})\n        });\n\n        if(type===\"전체\"){\n            setInformations(infoData);\n        }else{\n            infoData = infoData.filter(item => item.type === type || item.type === \"전체\")\n            setInformations(infoData);\n        }\n        \n        setLoading(true);\n    }\n\n\n\n    const typeTable = types.map((item, index) => {\n        let backColor = \"#060b26\"\n        if(item === type){\n            backColor = \"#ff0000\"\n        }\n        return(\n            <div className=\"typeOne\" key={index} style={{backgroundColor: `${backColor}`}}>\n                <Button onClick={() => {setType(item);}} style={{color:'white', fontSize:'12px'}}>{item}</Button>\n            </div>\n        )\n    })\n    const categoryTable = categorieslist.map((item, index) => {\n        let backColor = \"#060b26\"\n        if(item === category){\n            backColor = \"#ff0000\"\n        }\n        return(\n            <div className=\"typeOne\" key={index} style={{backgroundColor: `${backColor}`}}>\n                <Button onClick={() => {setCategory(item);}} style={{color:'white', fontSize:'12px'}}>{item}</Button>\n            </div>\n        )\n    })\n\n    useEffect(() => {\n        getAllInformations();\n    },[type])\n\n    const informationTable = informations.map((item, index) => {\n        return(\n            <InformationCard data={item} key={index} />\n        )\n    })\n\n    if(loading){\n        return (\n            <div className=\"landingcontainer\">\n            <div className=\"all-table-title\">\n                    <span>전체 갤러리들 입니다</span>\n            </div>\n\n            <div className=\"type-title\" style={{backgroundColor:'rgba(0,0,0,0)', color:'#060b26', marginTop:'1%'}}>\n                원하는 카테고리를 골라보세요.\n            </div>\n            <div className=\"type-table23\" style={{backgroundColor:'rgba(0,0,0,0)'}}>\n                {typeTable}\n            </div>\n\n            <div className=\"type-table23\" style={{backgroundColor:'rgba(0,0,0,0)'}}>\n                {categoryTable}\n            </div>\n\n\n            <div className=\"qna-table-container\">\n                <div className=\"landing-qna-table\">\n                    {informationTable}\n                </div>\n            </div>\n\n        </div>\n        )\n    }else{\n        return(\n        <div>\n            로딩중..\n        </div>\n        )\n    }\n}\n\nexport default AllInformations\n","import React, {useState} from 'react';\nimport {HashRouter as Router, Route, Switch} from \"react-router-dom\";\nimport './App.css';\nimport Auth from '../routes/Auth';\nimport Home from '../routes/Home';\nimport LandingPage from './views/LandingPage/LandingPage';\nimport GalleryPage from './views/GalleryPage/GalleryPage';\nimport ProfilePage from './views/ProfilePage/ProfilePage';\nimport UploadPage from './views/UploadPage/UploadPage';\nimport NavBar from './views/NavBar/NavBar';\nimport InformationUpload from './views/UploadPage/InformationUpload'\nimport QnAUpload from './views/UploadPage/QnAUpload'\nimport QnAPage from './views/InformationPage/QnAPage'\nimport InformationPage from './views/InformationPage/InformationPage'\nimport CollectionPage from './views/CollectionPage/CollectionPage'\nimport LikePage from './views/LikePage/LikePage'\nimport AllCollections from './views/AllPages/AllCollections'\nimport AllGalleries from './views/AllPages/AllGalleries'\nimport AllQnAs from './views/AllPages/AllQnAs'\nimport AllInformations from './views/AllPages/AllInformations'\n\nimport { createBrowserHistory } from 'history';\nconst history = createBrowserHistory();\n\nconst AppRouter = ({isLoggedIn, userObj}) => {\n    console.log(\"유저 오비제이22\", userObj)\nreturn(\n    <Router history={history}>\n        <Switch>\n            <>\n            <NavBar isLoggedIn={isLoggedIn} userObj={userObj}/>\n            <div className=\"Container\" style={{ minHeight: 'calc(100vh - 80px)', zIndex:-1 }}>\n                <Route exact path=\"/\">\n                    <LandingPage isLoggedIn={isLoggedIn} userObj={userObj}/>\n                </Route>\n                <Route exact path=\"/profile\">\n                    <ProfilePage userObj={userObj}/>\n                </Route>\n                <Route exact path=\"/update\">\n                    <ProfilePage userObj={userObj}/>\n                </Route>\n                <Route exact path=\"/upload\">\n                    <UploadPage userObj={userObj}/>\n                </Route>\n                <Route exact path=\"/uploadQnA\">\n                    <QnAUpload userObj={userObj}/>\n                </Route>\n                <Route exact path=\"/uploadInformation\">\n                    <InformationUpload userObj={userObj}/>\n                </Route>\n                <Route exact path=\"/gallery/:id\" component={ GalleryPage } />\n                <Route exact path=\"/QnAPage/:id\" component={QnAPage} />\n                <Route exact path=\"/InformationPage/:id\" component={InformationPage} />\n                \n                <Route exact path=\"/CollectionPage/:id\" component={ CollectionPage } />\n                <Route excct path=\"/mylikes\" component={LikePage} />\n                <Route exact path=\"/allcollections\">\n                    <AllCollections />\n                </Route>\n                <Route exact path=\"/allgalleries\">\n                    <AllGalleries />\n                </Route>\n                <Route exact path=\"/allqnas\">\n                    <AllQnAs />\n                </Route>\n                <Route exact path=\"/allinformations\">\n                    <AllInformations />\n                </Route>\n            </div>\n            {/* <Footer /> */}\n            </> \n        </Switch>\n    </Router>\n)\n}\nexport default AppRouter;","import React, {useState, useEffect} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {HashRouter as Router, Route} from \"react-router-dom\";\nimport LandingPage from './views/LandingPage/LandingPage';\nimport GalleryPage from './views/GalleryPage/GalleryPage';\nimport NavBar from './views/NavBar/NavBar';\nimport AppRouter from './Router';\nimport {app, authService, dbService} from './tools/fbase';\nimport * as AiIcons from 'react-icons/ai';\n\nfunction App() {\n  console.log(\"auth\", authService.currentUser ) //User 또는 null을 반환한다. 공식문서 잘 읽어서 쓰기! 로그인 여부 파악에 사용.\n  const [init, setInit] = useState(false);\n  // firebase가 유저를 읽어오기까지 기다려야 한다.\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [userObj, setUserObj] = useState(null);\n  const [gid, setGid] = useState(\"\");\n\n  const getMyGallery = async (user) => {\n\n    const dbgallery = await dbService\n      .collection(\"users\")\n      .where(\"userId\", \"==\", user.uid)\n      .get()\n\n    let dbgal = [{gal_id:1}]\n    dbgal = dbgallery.docs.map(doc => {return({...doc.data(), gal_id:doc.id})})\n    setUserObj({...user, gal_id:dbgal[0].gal_id})\n    setInit(true);\n  }\n\n  useEffect(() => {\n    //Add observers for changes to the user's sign-in state.\n    authService.onAuthStateChanged((user) => {\n      if(user){\n        setIsLoggedIn(true);\n        getMyGallery(user);\n      }else{\n        setIsLoggedIn(false);\n        setUserObj({...user, gal_id:1});\n        setInit(true);\n      }\n    });\n  }, [])\n  \n  return (\n    <>\n    {init ? <AppRouter isLoggedIn={isLoggedIn} userObj={userObj}/> : \"Initializing...\"}\n    <footer className=\"footer\">\n      <div className=\"footer-item\">\n        <a href=\"https://www.instagram.com/soozip_ga/\" className=\"insta\"><AiIcons.AiOutlineInstagram/> Instagram</a>\n        <a href=\"https://www.instagram.com/soozip_ga/\" className=\"insta\" style={{marginLeft:'3%'}}>문의하기</a>\n      </div>\n      <div className=\"footer-item\">&copyright by soozip {new Date().getFullYear()}</div>\n      </footer>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}