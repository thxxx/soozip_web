{"version":3,"sources":["components/logo.svg","components/tools/GalleryCard.js","components/views/LandingPage/Sections/BigGalleryList.js","components/tools/fbase.js","components/views/LandingPage/Sections/QnACard.js","components/views/LandingPage/Sections/CollectionCard.js","components/tools/types.js","components/views/LandingPage/LandingPage.js","components/tools/OneCollection.js","components/views/GalleryPage/Sections/CollectionList.js","components/tools/CommentContainer.js","components/views/GalleryPage/GalleryPage.js","components/views/NavBar/Sections/SideBarData.js","components/views/NavBar/NavBar.js","components/views/ProfilePage/Sections/MakeGallery.js","components/views/ProfilePage/ProfilePage.js","components/views/UploadPage/UploadPage.js","components/views/UploadPage/InformationUpload.js","components/views/UploadPage/QnAUpload.js","components/views/InformationPage/QnAPage.js","components/views/InformationPage/InformationPage.js","components/views/CollectionPage/CollectionPage.js","components/views/LikePage/LikePage.js","components/views/AllPages/AllCollections.js","components/Router.js","components/App.js","reportWebVitals.js","index.js"],"names":["GalleryCard","data","className","to","pathname","id","state","typess","map","item","index","galleryName","displayName","collection_num","gallery","title","owner","nums","BigGalleryList","app","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firebaseInstance","authService","auth","dbService","firestore","stService","storage","QnACard","console","log","style","fontSize","marginLeft","type","color","category","comment_num","CollectionCard","attachmentURL","src","display","like_num","typeSelect","value","label","types","position","top","left","transform","width","bgcolor","borderRadius","border","boxShadow","p","LandingPage","isLoggedIn","useState","galleries","setGalleries","collections","setCollections","qnas","setQnas","setType","open","setOpen","handleClose","onSocialClick","e","a","provider","GoogleAuthProvider","signInWithPopup","getAllCollections","collection","orderBy","limit","get","galleryDatas","galleryData","docs","doc","filter","includes","getRealAllCollections","collectionDatas","collectionData","getAllQnAs","qnaDatas","qnaData","useEffect","galleryTable","qnaTable","typeTable","backColor","backgroundColor","Button","onClick","collectionTable","length","right","Modal","onClose","Box","sx","justifyContent","OneCollection","isOwner","isEditing","onClickDelete","window","confirm","delete","refFromURL","CollectionList","User","mainColor","currentUser","creatorId","uid","CommentContainer","contentId","contentLikeNum","userId","update","setUpdate","comment","setComment","comments","setComments","getThisComments","where","dbcomments","uploadComment","getCommenterGalleryId","usersId","galleryColor","commentOne","collectionId","created","Date","now","galleryId","alert","add","then","docRef","qnaId","likeComment","dbLike","db_like","likeOne","ok","deleteComment","dbGallery","result","commentTable","dateResult","date","day","getDate","month","getMonth","hour","getHours","likeColor","margin","marginTop","paddingLeft","onChange","currentTarget","placeholder","GalleryPage","props","targets","useRef","setItem","loading","setLoading","setNow","getThisCollections","dbcollections","getThisGallery","match","params","snapshot","addLike","background","left_color","right_color","s","tyle","desc","ref","size","current","scrollIntoView","behavior","SideBarData","path","icon","cName","NavBar","userObj","sidebar","setSidebar","handleOpen","showSidebar","signOut","fontWeight","href","target","animatedComponents","makeAnimated","MakeGallery","history","useHistory","setGalleryName","setTypess","setColor","setDesc","submitGallery","preventDefault","galleryOne","go","onSubmit","autoSize","minRows","maxRows","closeMenuOnSelect","components","options","isMulti","ProfilePage","userName","setUserName","galleryDesc","setGalleryDesc","setGalleryColor","setGalleryTypes","hasGallery","setHasGallery","myCollections","setMyCollections","myGallery","setMyGallery","setIsEditing","getMyCollections","mydatas","getMyGallery","myGalleryData","changeGalleryInto","updateProfile","editOpen","email","photoURL","Typography","variant","component","Input","TextArea","UploadPage","setTitle","attachment","setAttachment","submit","attachmentRef","child","uuidv4","putString","response","getDownloadURL","collectionOne","dbGal","paddingTop","accept","oneFile","files","reader","FileReader","onloadend","finishedEvent","readAsDataURL","InformationUpload","InformationOne","categories","QnAUpload","setCategory","QnAOne","QnAPage","qna","setQna","info","setInfo","getThisQnA","getThisQnaInfo","dbinfos","dbinfo","InformationPage","gutter","textAlign","alignItems","CollectionPage","getThisCollection","dbcol","dbgallery","dbgal","gal_id","galId","paddingRight","LikePage","clikes","setClikes","glikes","setGlikes","setQclikes","getCollectionLikes","dbCollection","getGalleryLikes","getQnaCommentLikes","dbQna","glikesTable","clikesTable","AllCollections","createBrowserHistory","AppRouter","minHeight","zIndex","exact","excct","App","init","setInit","setIsLoggedIn","setUserObj","onAuthStateChanged","user","getFullYear","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.911aaf9c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, {useEffect, useState} from 'react'\nimport './GalleryCard.css'\nimport { Image } from 'antd'\nimport { Link } from 'react-router-dom';\n\nconst GalleryCard = ({data}) => {\n\n    return (\n        <div className=\"container\">\n            <Link to={{\n                pathname:`/gallery/${data.id}`,\n                state:{\n                    data:data\n                }\n            }} className=\"move\">\n            {/* <img src='img/logo512.png' className=\"galleryimg\"/> */}\n            <div className=\"types\">\n                {data.typess && data.typess.map((item, index) => {\n                    return (\n                        <span className=\"gallery-card-type\">{item}</span>\n                    )\n                })}\n            </div>\n            <div className=\"titlecon\">\n                <p>{data.galleryName}</p>\n            </div>\n            <div className=\"namecon\">\n                <span>{data.displayName}님의 갤러리</span>\n                <span>|</span>\n                <span>{data.collection_num}개의 컬렉션</span>\n            </div>\n            </Link>\n        </div>\n    )\n}\n\nexport default GalleryCard\n","import React from 'react'\nimport GalleryCard from '../../../tools/GalleryCard'\nimport './BigGalleryList.css'\n\nconst gallery = [\n    {\n        title:\"🐹 연희동의 올드 트래포드\",\n        owner:\"김호진\",\n        nums:65,\n        id:1\n    }\n]\nconst BigGalleryList = () => {\n    return (\n        <div className=\"BigGalleryContainer\">\n            <div className=\"middle\">\n                <span> ll </span>\n                <span><GalleryCard data={gallery[0]}/></span>\n                <span> rr </span>\n            </div>\n        </div>\n    )\n}\n\nexport default BigGalleryList\n","// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\n// import { getAnalytics } from \"firebase/analytics\";\nimport firebase from \"firebase/app\"\nimport \"firebase/firestore\"\nimport \"firebase/storage\"\nimport {GoogleAuthProvider} from \"firebase/auth\";\n\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCqo2yNCw4kKO_ix2oYaJzQLnArICExcLo\",\n  authDomain: \"soozipapp-a2a15.firebaseapp.com\",\n  projectId: \"soozipapp-a2a15\",\n  storageBucket: \"soozipapp-a2a15.appspot.com\",\n  messagingSenderId: \"209476182118\",\n  appId: \"1:209476182118:web:8e5b54ab78334871858da7\",\n  measurementId: \"G-CEPTLWYYF0\"\n};\n\n// Initialize Firebase\nexport const app = firebase.initializeApp(firebaseConfig);\nexport const firebaseInstance = firebase;\n// const analytics = getAnalytics(app);\nexport const authService = app.auth(); // 많이 호출할거니까 아예 여기서 해버리기\nexport const dbService = app.firestore();\nexport const stService = app.storage();","import React from 'react'\nimport './QnACard.css'\nimport {Link} from 'react-router-dom'\n\nconst QnACard = ({data}) => {\n    console.log(data)\n    return (\n        <div className=\"qna-card-container\">\n            <Link to={{\n                pathname:`/QnAPage/${data.id}`,\n                state:{\n                    data:data\n                }\n            }} className=\"link\">\n\n                <div>\n                    <span style={{fontSize:'13px', marginLeft:'0%'}}>{data.type}</span><span style={{marginLeft:'0px', color:'rgb(0,0,0,0.8)', fontSize:'12px'}}>에 관한 질문</span>\n                    <span style={{fontSize:'13px', marginLeft:'2%'}}>{data.category}</span><span style={{marginLeft:'0px', color:'rgb(0,0,0,0.8)', fontSize:'12px'}}>가 궁금해요</span>\n                </div>\n                <div className=\"qna-card-title\">{data.title}</div>     \n                <div className=\"qna-card-info\">       \n                    <span>작성자 : {data.displayName} </span>\n                    <span>|</span> \n                    <span>달린 답변 수 : {data.comment_num}</span>           \n                </div>\n            </Link>\n        </div>\n    )\n}\n\nexport default QnACard\n","import React from 'react'\nimport {Link} from 'react-router-dom';\nimport {dbService} from '../../../tools/fbase';\nimport {stService} from '../../../tools/fbase'\n\nconst CollectionCard = ({item}) => {\n    const onClickDelete = async () => {\n        const ok = window.confirm(\"Are you sure you want to delete?\");\n        if(ok){\n            //delete 파일도 같이 지워져야만 한다.\n            await dbService.doc(`collections/${item.id}`).delete();\n            await stService.refFromURL(item.attachmentURL).delete(); // URL만 가지고도 refence를 획들할 수 있게 해준다.\n        }else{\n\n        }\n    }\n    return (\n        <div className=\"one-collection-container2\">\n            <Link to={{\n                pathname:`/CollectionPage/${item.id}`,\n                state:{\n                    data:item\n                }\n            }} className=\"one-collection\">\n                {/* 실수로 파일을 삭제했을때를 대비 */}\n                <div className=\"one-collection-type\">{item.type}</div>\n                {item.attachmentURL && <img src={item.attachmentURL}  className=\"collection-img\"/>}\n                <div className=\"collection-info\" style={{display: \"flex\"}}>\n                    <span className=\"title\">\n                        {item.title}\n                    </span>\n                    <span className=\"like\">\n                        {item.like_num}\n                    </span>\n                </div>\n            </Link>\n        </div>\n    )\n}\n\nexport default CollectionCard;\n","\nexport const typeSelect = [\n    { value: 'all', label: '전체' },\n    { value: 'doll', label: \"🧸 인형\" },\n    { value: 'bearbrick', label: \"🗿 베어브릭\" },\n    { value: 'music', label: \"💽 음악\" },\n    { value: 'sports', label: \"🏟 스포츠\" },\n    { value: 'sneakers', label: \"👟 스니커즈\" },\n    { value: 'figure', label: \"🗽 피규어\" },\n    { value: 'etc', label: \"🦁 기타\" },\n]\nexport const types = [ '전체', \"🧸 인형\", \"🗿 베어브릭\", \"💽 음악\", \"🏟 스포츠\", \"👟 스니커즈\",\"🗽 피규어\", \"🦁 기타\" ]\n","import React from 'react'\nimport {useState, useEffect} from 'react'\nimport './Sections/LandingPage.css'\nimport GalleryCard from '../../tools/GalleryCard'\nimport BigGalleryList from './Sections/BigGalleryList'\nimport { Link } from 'react-router-dom';\nimport * as FaIcons from 'react-icons/fa';\nimport { app } from '../../tools/fbase';\nimport { dbService } from '../../tools/fbase';\nimport QnACard from './Sections/QnACard'\nimport CollectionCard from './Sections/CollectionCard'\nimport { types } from '../../tools/types'\nimport Modal from '@mui/material/Modal';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\nimport {firebaseInstance, authService, GoogleAuthProvider} from '../../tools/fbase';\n\nconst style = {\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n    width: 600,\n    bgcolor: 'background.paper',\n    borderRadius: '15px',\n    border: '1px solid rgba(0,0,0,0.1)',\n    boxShadow: 24,\n    p: 4,\n};\n\nconst LandingPage = ({isLoggedIn}) => {\n    const [galleries, setGalleries] = useState([]);\n    const [collections, setCollections] = useState([]);\n    const [qnas, setQnas] = useState([]);\n    const [informations, setInformations] = useState([]);\n    const [type, setType] = useState(\"전체\");\n    const [open, setOpen] = useState(false);\n\n    const handleOpen = () => {\n        setOpen(true);\n        \n    }\n\n    const handleClose = () => setOpen(false);\n\n\n    const onSocialClick = async (e) => {\n        //지금은 구글 로그인 밖에 없기때문에 굳이 구분하는 flow를 만들지 않는다.\n        let provider = new firebaseInstance.auth.GoogleAuthProvider();\n        const data = await authService.signInWithPopup(provider);\n        \n    }\n\n    const getAllCollections = async () => {\n        const galleryDatas = await dbService\n            .collection(\"users\")\n            .orderBy(\"like_num\", \"desc\")\n            .limit(6)\n            .get(); // uid를 creatorId로 줬었으니까.\n        let galleryData = galleryDatas.docs.map(doc => {\n            return({...doc.data(), id:doc.id})\n        });\n        if(type===\"전체\"){\n            setGalleries(galleryData);\n        }else{\n            galleryData = galleryData.filter(item => item.typess.includes(type) || item.typess.includes(\"전체\"))\n            setGalleries(galleryData);\n        }\n    }\n\n    const getRealAllCollections = async () => {\n        const collectionDatas = await dbService\n            .collection(\"collections\")\n            .orderBy(\"like_num\", \"desc\")\n            .limit(10)\n            .get(); // uid를 creatorId로 줬었으니까.\n        let collectionData = collectionDatas.docs.map(doc => {\n            return({...doc.data(), id:doc.id})\n        });\n        if(type===\"전체\"){\n            setCollections(collectionData);\n        }else{\n            collectionData = collectionData.filter(item => item.type === type|| item.type === \"전체\")\n            setCollections(collectionData);\n        }\n    }\n\n    const getAllQnAs = async () => {\n        const qnaDatas = await dbService\n            .collection(\"qnas\")\n            .limit(6)\n            .get(); // uid를 creatorId로 줬었으니까.\n\n        let qnaData = qnaDatas.docs.map(doc => {\n            return({...doc.data(), id:doc.id})\n        });\n        if(type===\"전체\"){\n            setQnas(qnaData);\n        }else{\n            qnaData = qnaData.filter(item => item.type === type || item.type === \"전체\")\n            setQnas(qnaData);\n        }\n    }\n\n    useEffect(() => {\n        getAllCollections();\n        getRealAllCollections();\n        getAllQnAs();\n    },[type])\n\n    const galleryTable = galleries.map((item, index) => {\n        return(\n            <GalleryCard data={item} key={index}/>\n            )\n        })\n\n    const qnaTable = qnas.map((item, index) => {\n        return(\n            <QnACard data={item} key={index} />\n        )\n    })\n\n    const typeTable = types.map((item, index) => {\n        let backColor = \"#dddddd\"\n        if(item === type){\n            backColor = \"#ff0000\"\n        }\n        return(\n            <div className=\"typeOne\" key={index} style={{backgroundColor: `${backColor}`}}>\n                <Button onClick={() => {setType(item);}} style={{color:'black', fontSize:'12px'}}>{item}</Button>\n            </div>\n        )\n    })\n\n    const collectionTable = collections.map((item, index) => {\n        return(\n            <CollectionCard item={item} key={index}/>\n        )\n    })\n\n    // 빅 갤러리 리스트에 ContextAPI로 넘겨주기\n    if(galleries.length > 0){\n    return (\n        <div className=\"landingcontainer\">\n            <div className=\"type-title\">원하는 카테고리를 골라보세요.</div>\n            <div className=\"type-table23\">\n                {typeTable}\n            </div>\n            <BigGalleryList />\n            <p>안녕하세요 랜딩페이지입니다!</p>\n\n            <div className=\"qna-table-container\">\n                <div className=\"qna-table-title\">\n                    <span>갤러리들 입니다</span>\n                    <Link to=\"allgalleries\" className=\"more-look-button\">갤러리 더보기 ></Link>\n                </div>\n                <div className=\"landing-qna-table\">\n                    {galleryTable}\n                </div>\n            </div>\n\n            <div className=\"qna-table-container\">\n                <div className=\"qna-table-title\">\n                    <span>컬렉션들 입니다</span>\n                    <Link to=\"allcollections\" className=\"more-look-button\">컬렉션 더보기 ></Link>\n                </div>\n                <div className=\"landing-qna-table\">\n                    {collectionTable}\n                </div>\n            </div>\n\n            <div className=\"information-table\">\n                <p className=\"qna-title\">\n                    🍯 꿀정보 교환소\n                </p>\n            </div>\n            <div className=\"qna-table-container\">\n                <div className=\"qna-table-title\">\n                    <span>🙋🏻 QnA 거래소</span>\n                    <Link to=\"allqnas\" className=\"more-look-button\">QnA 더보기 ></Link>\n                </div>\n                <div className=\"landing-qna-table\">\n                    {qnaTable}\n                </div>\n            </div>\n            {isLoggedIn ? <>\n            <Link to=\"upload\" className=\"upload-button\">컬렉션 등록하기</Link> \n            <Link to=\"uploadQnA\" className=\"upload-button\" style={{right:300}}>질문 등록하기</Link> \n            <Link to=\"uploadInformation\" className=\"upload-button\" style={{right:800}}>정보 등록하기</Link> \n            </>: \n            <span className=\"upload-button\" onClick={handleOpen}>컬렉션 등록하기</span>\n            }\n            \n            {/* 아래는 수정용 모달. */}\n            <Modal\n                open={open}\n                onClose={handleClose}\n                aria-labelledby=\"modal-modal-title\"\n                aria-describedby=\"modal-modal-description\"\n            >\n                <Box sx={style}>\n                <div className=\"update-body\">\n                    <span style={{width: '100%'}}>\n                    <p className=\"login-desc\">3초만에 로그인하고 시작하기</p>\n\n                    </span>\n                    <span style={{width: '100%'}}>\n                        <button onClick={onSocialClick} className=\"google-login\">Google 로그인</button>\n                    </span>\n                    <div style={{width: '100%', display:'flex', justifyContent:'end'}}>\n                    <Button onClick={handleClose} style={{ marginLeft:10, color:'black',backgroundColor:'#993333', width:'10%'}}>\n                        닫기\n                    </Button>\n                    </div>\n                </div>\n                </Box>\n            </Modal>\n\n        </div>\n        )\n    }else{\n        return(<div>대기</div>)\n    }\n\n}\n\nexport default LandingPage\n","import React from 'react'\nimport {Link} from 'react-router-dom';\nimport './OneCollections.css';\nimport {dbService} from '../tools/fbase';\nimport {stService} from '../tools/fbase';\n\nconst OneCollection = ({item,isOwner, isEditing}) => {\n    const onClickDelete = async () => {\n        const ok = window.confirm(\"Are you sure you want to delete?\");\n        if(ok){\n            //delete 파일도 같이 지워져야만 한다.\n            await dbService.doc(`collections/${item.id}`).delete();\n            await stService.refFromURL(item.attachmentURL).delete(); // URL만 가지고도 refence를 획들할 수 있게 해준다.\n        }else{\n\n        }\n    }\n    return (\n        <div className=\"one-collection-container2\">\n            <Link to={{\n                pathname:`/CollectionPage/${item.id}`,\n                state:{\n                    data:item\n                }\n            }} className=\"one-collection\">\n                {/* 실수로 파일을 삭제했을때를 대비 */}\n                {item.attachmentURL && <img src={item.attachmentURL}  className=\"collection-img\"/>}\n                <div className=\"collection-info\" style={{display: \"flex\"}}>\n                    <span className=\"title\">\n                        {item.title}\n                    </span>\n                    <span className=\"like\">\n                        {item.like_num}\n                    </span>\n                </div>\n            </Link>\n            {isOwner && isEditing ? <>\n            <button onClick={onClickDelete}>Delete</button>\n            {/* <button>Update</button> */}\n            </> : null }\n        </div>\n    )\n}\n\nexport default OneCollection\n","import React from 'react'\nimport OneCollection from '../../../tools/OneCollection'\nimport {authService} from '../../../tools/fbase';\nimport './GalleryPage.css'\n\nconst CollectionList = ({collections, isEditing, mainColor}) => {\n    const User = authService.currentUser;\n\n    const collectionTable = collections.map((item, index) => {\n        if(User !== null){\n            return(\n                <OneCollection item={item} isEditing={isEditing} isOwner={item.creatorId === User.uid} key={index}/>\n            )\n        }else{\n            return(\n                <OneCollection item={item} isEditing={isEditing} isOwner={false} key={index}/>\n            )\n        }\n    })\n\n    return (\n        // <div className=\"collections-table\" style={{backgroundColor:`${mainColor}`}}>\n        <div className=\"collections-table2\">\n            {collectionTable}\n        </div>\n    )\n}\n\nexport default CollectionList\n","import React, {useEffect, useState} from 'react'\nimport {Link} from 'react-router-dom';\nimport Button from '@mui/material/Button';\nimport {Input} from 'antd'\nimport { dbService } from './fbase';\nimport {authService} from './fbase';\nimport './CommentContainer.css'\n\nconst CommentContainer = ({category, contentId, userId, contentLikeNum}) => {\n    const [update, setUpdate] = useState(false);\n    const [comment, setComment] = useState(\"\");\n    const [comments, setComments] = useState([]);\n    const [gid, setGid] = useState(\"\");\n    const User = authService.currentUser;\n\n    useEffect(() => {\n        getThisComments();\n    },[update])\n\n    const getThisComments = async () => {\n        let dbcomments;\n        switch(category){\n            case \"c_comments\":{\n                dbcomments = await dbService\n                .collection(category)\n                .where(\"collectionId\", \"==\", contentId)\n                .orderBy(\"created\", \"desc\")\n                .get();\n                setComments(dbcomments.docs.map(doc => {return({...doc.data(), id:doc.id})}));\n                break;\n            }\n            case \"g_comments\":{\n                dbcomments = await dbService\n                .collection(category)\n                .where(\"userId\", \"==\", contentId)\n                .orderBy(\"created\", \"desc\")\n                .get();\n                setComments(dbcomments.docs.map(doc => {return({...doc.data(), id:doc.id})}));\n                break;\n            }\n            case \"qna_comments\":{\n                console.log(category, \" 입니다.\")\n                dbcomments = await dbService\n                .collection(category)\n                .where(\"qnaId\", \"==\", contentId)\n                .orderBy(\"created\", \"desc\")\n                .get();\n                setComments(dbcomments.docs.map(doc => {return({...doc.data(), id:doc.id})}));\n                break;\n            }\n            case \"i_comments\":{\n                dbcomments = await dbService\n                .collection(category)\n                .where(\"information_id\", \"==\", contentId)\n                .orderBy(\"created\", \"desc\")\n                .get();\n                setComments(dbcomments.docs.map(doc => {return({...doc.data(), id:doc.id})}));\n                break;\n            }\n        }\n    }\n\n    const uploadComment = async () => {\n        // 로그인 한 유저여야 한다.\n\n        const [usersId, galleryName, galleryColor] = await getCommenterGalleryId(User.uid)\n\n        console.log(usersId, galleryName)\n\n        switch(category){\n            case \"c_comments\":{\n                const commentOne = {\n                    creatorId:User.uid, // 댓글을 작성한 유저 아이디\n                    collectionId:contentId, // 댓글이 달린 컬렉션의 아이디\n                    comment:comment,\n                    displayName:User.displayName,\n                    created:Date.now(),\n                    galleryId:usersId, // 댓글을 작성한 유저가 소유한 갤러리 아이디.\n                    galleryName,\n                    galleryColor\n                };\n\n                if(comment.length < 3){\n                    alert(\"3글자 이상 입력하셔야 합니다.\")\n                    return;\n                }\n                await dbService.collection(category).add(commentOne)\n                .then((docRef) => {console.log(\"이걸로 함\", docRef.id)});\n                await dbService.doc(`collections/${contentId}`).update({\n                    comment_num:contentLikeNum + 1,\n                });\n                break;\n            }\n            case \"g_comments\":{\n                const commentOne = {\n                    creatorId:User.uid, // 댓글을 작성한 유저 아이디\n                    userId:contentId, // 댓글이 달린 갤러리의 아이디\n                    comment:comment,\n                    displayName:User.displayName,\n                    created:Date.now(),\n                    galleryId:usersId, // 댓글을 작성한 유저가 소유한 갤러리 아이디.\n                    galleryName,\n                    galleryColor\n                };\n\n                if(comment.length < 3){\n                    alert(\"3글자 이상 입력하셔야 합니다.\")\n                    return;\n                }\n\n                await dbService.collection(category).add(commentOne)\n                .then((docRef) => {console.log(\"이걸로 함\", docRef.id)});\n                await dbService.doc(`users/${contentId}`).update({\n                    comment_num:contentLikeNum + 1,\n                });\n                break;\n            }\n            case \"i_comments\":{\n                \n                break;\n            }\n            case \"qna_comments\":{\n                const commentOne = {\n                    creatorId:User.uid,\n                    comment:comment,\n                    displayName:User.displayName,\n                    created:Date.now(),\n                    like_num:0,\n                    qnaId:contentId,\n                    galleryId:usersId, // 댓글을 작성한 유저가 소유한 갤러리 아이디.\n                    galleryName,\n                    galleryColor\n\n                };\n\n                if(comment.length < 3){\n                    alert(\"3글자 이상 입력하셔야 합니다.\")\n                    return;\n                }\n\n                await dbService.collection(\"qna_comments\").add(commentOne)\n                .then((docRef) => {console.log(\"이걸로 함\", docRef.id)});\n                await dbService.doc(`qnas/${contentId}`).update({\n                    comment_num:contentLikeNum + 1,\n                });\n                break;\n            }\n        }\n\n        alert(\"댓글 작성!\")\n        setComment(\"\");\n        setUpdate(!update);\n    }\n\n\n    const likeComment = async (item) => {\n        // 좋아요를 누른 적 있는지 체크해야한다.\n        const dbLike = await dbService\n            .collection(\"qna_comments_like\")\n            .where(\"creatorId\", \"==\", User.uid)\n            .where(\"qnaId\", \"==\", item.id)\n            .get();\n        const db_like = dbLike.docs.map(doc => {return({...doc.data(), id:doc.id})});\n        console.log(\"dbLike\", db_like)\n\n        if(db_like.length === 0){\n            const likeOne = {\n                creatorId: User.uid,\n                qnaId: item.id\n            }\n            await dbService.collection(\"qna_comments_like\").add(likeOne)\n\n            await dbService.doc(`qna_comments/${item.id}`).update({\n                like_num:item.like_num + 1\n            });\n            alert(\"누르기 했습니다. \");\n            setUpdate(!update);\n        }else{\n            const ok = window.confirm(\"이미 좋아요를 누르셨습니다. 취소하시겠습니까?\");\n            console.log(db_like[0].id);\n            \n            if(ok){\n                await dbService.doc(`qna_comments_like/${db_like[0].id}`).delete();\n\n                await dbService.doc(`qna_comments/${item.id}`).update({\n                    like_num:item.like_num - 1,\n                });\n                alert(\"취소 했습니다!\");\n                setUpdate(!update);\n            }else{\n                return;\n            }\n        }\n    }\n    \n    const deleteComment = async (item) => {\n        const ok = window.confirm(\"Are you sure you want to delete?\");\n        if(ok){\n            //delete 파일도 같이 지워져야만 한다.\n            await dbService.doc(`${category}/${item.id}`).delete();\n            switch(category){\n                case \"c_comments\":{\n                    await dbService.doc(`collections/${contentId}`).update({\n                        comment_num:contentLikeNum - 1,\n                    });\n                    break;\n                }\n                case \"g_comments\":{\n                    await dbService.doc(`users/${contentId}`).update({\n                        comment_num:contentLikeNum - 1,\n                    });\n                    break;\n                }\n                case \"i_comments\":{\n                    break;\n                }\n            }\n            alert(\"삭제 했습니다. \");\n            setUpdate(!update);\n        }else{\n\n        }\n    }\n\n    const getCommenterGalleryId = async (creatorId) => {\n\n        const dbGallery = await dbService.collection(\"users\")\n        .where(\"userId\", \"==\", creatorId)\n        .get();\n\n        let result = dbGallery.docs.map(doc => {return({...doc.data(), id:doc.id})})\n\n        if(result.length === 0){\n            return \"\";\n        }else{\n            return [result[0].id, result[0].galleryName, result[0].color];\n        }\n    }\n\n    const commentTable = comments.map((item,index) => {\n        let isOwner = false;\n        if(User){\n            isOwner = item.creatorId === User.uid;\n        }\n        let date = new Date(item.created);\n        let now = new Date();\n        \n        let day = now.getDate() - date.getDate();\n        let month = now.getMonth() - date.getMonth();\n        let hour = now.getHours() - date.getHours();\n\n        let dateResult;\n        if(month === 0){\n            if(day===0){\n                dateResult = hour + \"시간 전\"\n            }else{\n                dateResult = day + \"일 전\"\n            }\n        }else{\n            dateResult = month + \"달 전\"\n        }\n\n        let likeColor = '#000000';\n        if(category === \"qna_comments\" && item.like_num > 5){\n            likeColor = 'rgb(145, 2, 2)'\n        }else if(category === \"qna_comments\" && item.like_num > 5){\n            likeColor = '#6705b8'\n        }\n\n        return(\n            <div className=\"comment-one\" key={index}>\n                <span className=\"comment-body\">\n                    <Link to={{\n                        pathname:`/gallery/${item.galleryId}`\n                    }} className=\"comment-move\">\n                        <p style={{margin:'3px'}}><span style={{color:'gray'}}>작성</span> {item.displayName}</p>\n                        <p style={{margin:'3px', color:`${item.galleryColor}`}}>{item.galleryName} </p>\n                    </Link>\n                    <div className=\"comment-body-body\">\n                        <p style={{margin:'0px', marginTop:'3px', color:'rgba(0,0,0,0.2)', fontSize:'12px', paddingLeft:'0%'}}>\n                            {dateResult}\n                        </p>\n                        <p style={{margin:'0px'}}> {item.comment}</p>\n                    </div>\n                </span>\n                <span className=\"buttons\">\n                    { category === \"qna_comments\" && <>\n                    <span onClick={() => likeComment(item)} \n                        style={{backgroundColor:'#5555ff', fontSize:'12px', color:'white', margin:'2px'}} \n                        className=\"like-button\">\n                        👍\n                    </span>\n                    <span className=\"like-num\" style={{color:`${likeColor}`}}>{item.like_num}</span>\n                    </>}\n                    \n                    { isOwner && <>\n                        <span onClick={() => deleteComment(item)} \n                            className=\"delete-button\">X</span>\n                    </>}\n                </span>\n            </div>\n        )\n    })\n\n    {/* 댓글을 달고 보여주는 공간 */}\n    return (\n        <div className=\"comment-container\">\n            <div className=\"comment-body-container\">\n                {category === \"g_comments\" ? \n                <div className=\"comment-title\">\n                    <span style={{fontSize:'18px', color:'green'}}>갤러리 방명록</span>    공간에 대한 감상평을 남겨보세요!\n                </div> : null}\n                <div className=\"comment-input-container\">\n                    <Input value={comment} onChange={e => setComment(e.currentTarget.value)} placeholder=\"댓글을 입력하세요.\" className=\"comment-input\"/>\n                    <span className=\"comment-send\" onClick={uploadComment} >\n                        작성\n                    </span>\n                </div>\n                <div className=\"comment-table-container\">\n                    {commentTable}\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default CommentContainer\n","import React, {useEffect, useState,useRef} from 'react'\nimport './Sections/GalleryPage.css'\nimport { dbService } from '../../tools/fbase';\nimport OneCollection from '../../tools/OneCollection';\nimport {authService} from '../../tools/fbase';\nimport CollectionList from './Sections/CollectionList';\nimport CommentContainer from '../../tools/CommentContainer';\nimport * as FaIcons from 'react-icons/fa';\nimport * as AiIcons from 'react-icons/ai';\n\nconst GalleryPage = (props) => {\n    const targets = useRef(null);\n    const [update, setUpdate] = useState(false);\n    const [collections, setCollections] = useState([]);\n    const [item, setItem] = useState({});\n    const [loading, setLoading] = useState(false);\n    const [now, setNow] = useState(\"\");\n    const User = authService.currentUser;\n\n    const scrollDown = () => {\n        // const target = document.getElementById('second')\n        targets.current.scrollIntoView({behavior: 'smooth'})\n        \n    }\n\n    // useEffect안에서 async를 하기 위해서 이렇게 따로 함수로 빼서 한다.\n    // getThisCollections(); 이건 옛날방식이다?ㅠㅠ\n    const getThisCollections = async () => {\n        if(loading === true){\n            const dbcollections = await dbService\n            .collection(\"collections\")\n            .where(\"creatorId\", \"==\", item.userId)\n            .get();\n            setCollections(dbcollections.docs.map(doc => {\n                return({...doc.data(), id:doc.id})        \n                }\n            ));\n        }\n        //     // set이 붙는 함수를 쓸 때 값이 아니라 함수를 전달할 수 있다.\n    }\n    const getThisGallery = async () => {\n        const dbgallery = await dbService\n        .collection(\"users\")\n        .doc(props.match.params.id)\n        .get()\n        .then(snapshot => setItem({...snapshot.data(), id:snapshot.id}));\n        //     // set이 붙는 함수를 쓸 때 값이 아니라 함수를 전달할 수 있다.\n        setLoading(true);\n        setNow(props.match.params.id)\n    }\n\n    useEffect(() => {\n        if(now !== props.match.params.id){\n            setLoading(false);\n        }\n        // if(props.location.state === undefined){\n        //     props.history.push(\"/\")       \n        // }\n        getThisGallery();\n        getThisCollections(); // 이건 옛날방식이다?ㅠㅠ\n        // 이 방법이 re-render하지 않아서 더 빠르다.\n    },[update, loading, props.match.params.id])\n\n    const addLike = async () => {\n        // 좋아요를 누른 적 있는지 체크해야한다.\n        const dbLike = await dbService\n            .collection(\"users_like\")\n            .where(\"creatorId\", \"==\", User.uid)\n            .where(\"galleryId\", \"==\", item.id)\n            .get();\n        const db_like = dbLike.docs.map(doc => {return({...doc.data(), id:doc.id})});\n        console.log(\"dbLike\", db_like)\n\n        if(db_like.length === 0){\n            const likeOne = {\n                creatorId: User.uid,\n                galleryId: item.id\n            }\n            await dbService.collection(\"users_like\").add(likeOne)\n\n            await dbService.doc(`users/${item.id}`).update({\n                like_num:item.like_num + 1,\n            });\n            alert(\"I like it!\");\n            setUpdate(!update);\n        }else{\n            const ok = window.confirm(\"이미 좋아요를 누르셨습니다. 취소하시겠습니까?\");\n            console.log(db_like[0].id);\n            \n            if(ok){\n                await dbService.doc(`users_like/${db_like[0].id}`).delete();\n\n                await dbService.doc(`users/${item.id}`).update({\n                    like_num:item.like_num - 1,\n                });\n                alert(\"취소 했습니다!\");\n                setUpdate(!update);\n            }else{\n                return;\n            }\n        }\n    }\n\n    \n    return (\n        <div className=\"gallery-container\" style={{ background:`linear-gradient(to right, ${item.left_color} 30%, ${item.right_color})`}}>\n            <div className=\"gallery-header\">\n                <span className=\"gallery-owner\" style={{backgroundColor:`${item.color}`}}>\n                    <div>\n                        <span className=\"font\">{item.displayName}</span>님의 공간입니다.\n                    </div>\n                    <span className=\"gallery-title\">\n                        {item.galleryName}\n                    </span>\n                </span>\n                <div className=\"title-info\">\n                    <p><span>{item.collection_num}개의 컬렉션이 전시되어있고 </span><span> {item.like_num}명이 좋아합니다. </span><span s tyle={{marginLeft:'10%'}}> {item.comment_num}개의 댓글</span></p>\n                </div>\n                <div className=\"type-table\">\n                    {loading && item.typess.map((item, index) => {\n                        return (\n                            <span key={index} className=\"tag\">{item}</span>\n                        )\n                    })}\n                </div>\n                <div className=\"galley-info\">\n                    {item.desc}\n                </div>\n            </div>\n            <div className=\"collection-list\">\n                <CollectionList collections={collections} mainColor={\"rgba(0,0,0,0)\"}/>\n            </div>\n            {/* 비슷한 갤러리 추천 공간 */}\n            <div>\n                \n            </div>\n\n            <hr color=\"black\"/>\n            {/* 댓글을 달고 보여주는 공간 */}\n\n            <div ref={targets} ></div>\n\n            { loading && <CommentContainer category=\"g_comments\" contentId={item.id} userId={item.userId} contentLikeNum={item.comment_num} />}\n            \n            <span className=\"side-actions\">\n                <span className=\"action-component\" onClick={addLike}>\n                    <FaIcons.FaRegHeart color=\"5555ff\" size=\"30px\"/>\n                    <span className=\"num\">{item.like_num}</span>\n                </span>\n                <span className=\"action-component\" onClick={scrollDown}>👁‍🗨 {item.comment_num}</span>\n                <span className=\"action-component\">✉️</span>\n            </span>\n        </div>\n    )\n}\n\nexport default GalleryPage\n","import React from 'react'\nimport * as FaIcons from 'react-icons/fa';\nimport * as AiIcons from 'react-icons/ai';\nimport * as IoIcons from 'react-icons/io';\n\nexport const SideBarData = [\n    {\n        title:'Home',\n        path:'/',\n        icon: \"🏡\",\n        cName: 'nav-text'\n    },\n    {\n        title:'내 갤러리',\n        path:'/profile',\n        icon: \"🧑🏻‍💻\",\n        cName: 'nav-text'\n    },\n    {\n        title:'my likes',\n        path:'/mylikes',\n        icon: \"👍\",\n        cName: 'nav-text'\n    },\n    {\n        title:'의견 및 오류 제보',\n        path:'/reports',\n        icon: \"📑\",\n        cName: 'nav-text'\n    },\n    {\n        title:'이메일 문의하기',\n        path:'/help',\n        icon: \"🙋🏻\",\n        cName: 'nav-text'\n    },\n]","import React, {useState} from 'react'\nimport { Link } from 'react-router-dom';\nimport './Sections/NavBar.css'\nimport * as FaIcons from 'react-icons/fa';\nimport * as AiIcons from 'react-icons/ai';\nimport { SideBarData } from './Sections/SideBarData';\nimport { IconContext } from 'react-icons';\nimport {firebaseInstance, authService, GoogleAuthProvider} from '../../tools/fbase';\nimport Button from '@mui/material/Button';\nimport Modal from '@mui/material/Modal';\nimport Box from '@mui/material/Box';\n\nconst style = {\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n    width: 600,\n    bgcolor: 'background.paper',\n    borderRadius: '15px',\n    border: '1px solid rgba(0,0,0,0.1)',\n    boxShadow: 24,\n    p: 4,\n};\n\n\nconst NavBar = ({isLoggedIn, userObj}) => {\n    const [sidebar, setSidebar] = useState(false);\n    const [open, setOpen] = useState(false);\n\n    const handleOpen = () => {\n        setOpen(true);\n        \n    }\n\n    const handleClose = () => setOpen(false);\n\n    const showSidebar = () => {\n        setSidebar(!sidebar);\n        console.log(\"사이드바 인 아웃\");\n    }\n\n    const onLogOutClick = () => {\n        console.log(\"로그아웃\")\n        authService.signOut();\n    }\n\n    const onSocialClick = async (e) => {\n        //지금은 구글 로그인 밖에 없기때문에 굳이 구분하는 flow를 만들지 않는다.\n        let provider = new firebaseInstance.auth.GoogleAuthProvider();\n        const data = await authService.signInWithPopup(provider);\n    }\n\n    return (\n        <div>\n            <div className=\"header\">\n                <span>\n                    <Link to=\"/\" className=\"nav-title\">Soozip</Link>\n                </span>\n                <span className=\"nav-on\">\n                    {isLoggedIn ? <button onClick={onLogOutClick} className=\"inout-button\">로그아웃</button> : <button onClick={onSocialClick}>로그인</button>}\n                    {userObj ? <p style={{fontWeight:700}}>{userObj.displayName}</p> : null}\n                    <Link to=\"#\" className=\"menu-bars\">\n                        <FaIcons.FaBars onClick={showSidebar} />\n                    </Link>\n                </span>\n            </div>\n                <nav className={sidebar ? 'nav-menu active' : 'nav-menu'}>\n                    <ul className=\"nav-menu-items\" onClick={showSidebar}>\n                        <li className=\"navbar-toggle\">\n                            <Link to=\"#\" className='menu-bars'>\n                                <AiIcons.AiOutlineClose/>\n                            </Link>\n                        </li>\n                        {SideBarData.map((item, index) => {\n                            if(!isLoggedIn && item.title === \"내 갤러리\"){\n                                return(\n                                    <li key={index} className={item.cName}>\n                                        <span to={item.path} onClick={handleOpen}>\n                                            {item.icon}\n                                            <span style={{color:'white'}}>{item.title}</span>\n                                        </span>\n                                    </li>\n                                )\n                            }else if(!isLoggedIn && item.title === \"my likes\"){\n                                return(\n                                    <li key={index} className={item.cName}>\n                                        <span to={item.path} onClick={handleOpen}>\n                                            {item.icon}\n                                            <span style={{color:'white'}}>{item.title}</span>\n                                        </span>\n                                    </li>\n                                )\n                            }else{\n                                return (\n                                <li key={index} className={item.cName}>\n                                    <Link to={item.path}>\n                                        {item.icon}\n                                        <span>{item.title}</span>\n                                    </Link>\n                                </li>\n                                )\n                            }\n                        })}\n                        <li className=\"nav-text\">\n                            <a href=\"https://naver.com\" target=\"_black\">\n                                <AiIcons.AiOutlineInstagram/> Instagram\n                            </a>\n                        </li>\n                    </ul>\n                </nav>\n\n            {/* 아래는 수정용 모달. */}\n            <Modal\n                open={open}\n                onClose={handleClose}\n                aria-labelledby=\"modal-modal-title\"\n                aria-describedby=\"modal-modal-description\"\n            >\n                <Box sx={style}>\n                <div className=\"update-body\">\n                    <span style={{width: '100%'}}>\n                    <p className=\"login-desc\">3초만에 로그인하고 시작하기</p>\n\n                    </span>\n                    <span style={{width: '100%'}}>\n                        <button onClick={onSocialClick} className=\"google-login\">Google 로그인</button>\n                    </span>\n                    <div style={{width: '100%', display:'flex', justifyContent:'end'}}>\n                    <Button onClick={handleClose} style={{ marginLeft:10, color:'black',backgroundColor:'#993333', width:'10%'}}>\n                        닫기\n                    </Button>\n                    </div>\n                </div>\n                </Box>\n            </Modal>\n        </div>\n    )\n}\n\nexport default NavBar\n","import React, {useState} from 'react'\nimport { dbService } from '../../../tools/fbase'\nimport {useHistory} from 'react-router-dom'\nimport Select from 'react-select'\nimport {typeSelect} from '../../../tools/types'\nimport makeAnimated from 'react-select/animated';\n\nconst animatedComponents = makeAnimated();\n\nconst MakeGallery = ({userObj}) => {\n    const history = useHistory();\n    const [galleryName, setGalleryName] = useState(\"\");\n    const [typess, setTypess] = useState([]);\n    const [type, setType] = useState(\"\");\n    const [color, setColor] = useState(\"#f0f0f0\");\n    const [desc, setDesc] = useState(\"\");\n\n    const submitGallery = async e => {\n        e.preventDefault();\n        console.log(galleryName, color, desc, userObj.uid);\n        const galleryOne = {\n            galleryName,\n            color,\n            desc,\n            userId:userObj.uid,\n            displayName:userObj.displayName,\n            like_num:0,\n            comment_num:0,\n            collection_num:0,\n            typess:typess\n        };\n\n        await dbService.collection(\"users\").add(galleryOne);\n        alert(\"갤러리 생성!\");\n        history.go(0);\n    }\n\n    return (\n        <div className=\"uploadcontainer\">\n            <div className=\"uploadIncontainer\">\n                <form onSubmit={submitGallery}>\n                    <p className=\"thanks\"> 갤러리 생성하기 </p>\n                    <p className=\"add-thanks\">나만의 개성이 가득담긴 공간을 만들어보세요 </p>\n                    <p className=\"inputLabel\">갤러리 이름</p>\n                    <p className=\"inputLabel\">ex. 🗽방구석 호그와트</p>\n                    <input autoSize={{ minRows: 1, maxRows: 2 }} placeholder=\"갤러리 이름\" \n                        className=\"nameInput\" \n                        value={galleryName} \n                        onChange={(e) => {setGalleryName(e.currentTarget.value)}}>\n                    </input>\n\n                    <p className=\"inputLabel\">컬렉션에 대한 나만의 설명을 적어주세요</p>\n                    <input \n                        className=\"nameInput\" \n                        value={desc} \n                        onChange={(e) => {setDesc(e.currentTarget.value)}}\n                        autoSize={{ minRows: 3, maxRows: 5 }}\n                        placeholder=\"설명을 작성해주세요\"\n                    ></input>\n                    <div style={{marginTop:'10%'}}>\n                    <p className=\"inputLabel\" style={{fontSize:\"15px\"}}>갤러리의 타입을 선택해주세요</p>\n                    <Select\n                        closeMenuOnSelect={false}\n                        components={animatedComponents}\n                        options={typeSelect} \n                        onChange={e => {setTypess(e); console.log(e)}}\n                        isMulti\n                    />\n                        {/* <Select options={types} onChange={e => {setType(e.label); console.log(e.label)}} /> */}\n                    </div>\n                    <div style={{marginTop:'10%'}}>\n                    <p className=\"inputLabel\" style={{fontSize:\"15px\"}}>나의 공간의 메인 색상을 정해보세요</p>\n                        <input type=\"color\" value={color} onChange={e => setColor(e.currentTarget.value)}/>\n                    </div>\n                    \n                    <div>\n                    <button className=\"inputButton\" onClick={submitGallery}>등록하기</button>\n                    </div>\n                </form>\n            </div>\n        </div>\n    )\n}\n\nexport default MakeGallery\n","import React, {useState, useEffect} from 'react'\nimport {app, authService} from '../../tools/fbase';\nimport {dbService } from '../../tools/fbase'\nimport {useHistory} from 'react-router-dom'\nimport CollectionList from '../GalleryPage/Sections/CollectionList';\nimport MakeGallery from './Sections/MakeGallery';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\nimport Modal from '@mui/material/Modal';\nimport Input from '@mui/material/Input';\nimport './Sections/ProfilePage.css'\n\nconst style = {\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n    width: 300,\n    bgcolor: 'background.paper',\n    borderRadius: '15px',\n    border: '1px solid rgba(0,0,0,0.1)',\n    boxShadow: 24,\n    p: 4,\n};\n\nconst ProfilePage = (props) => {\n    // 아직 갤러리를 만들지 않은 상태면 만들게 해야한다.\n    // 갤러리를 만든 상태라면 불러온다.\n\n    const User = authService.currentUser;\n    const [userName, setUserName] = useState(props.userObj.displayName);\n    const [galleryName, setGalleryName] = useState(\"\");\n    const [galleryDesc, setGalleryDesc] = useState(\"\");\n    const [galleryColor, setGalleryColor] = useState(\"\");\n    const [galleryTypes, setGalleryTypes] = useState([]);\n    const [hasGallery, setHasGallery] = useState(true);\n    const [loading, setLoading] = useState(false);\n    const [myCollections, setMyCollections] = useState([]);\n    const [myGallery, setMyGallery] = useState([]);\n    const [open, setOpen] = useState(false);\n    const [isEditing, setIsEditing] = useState(false);\n    const [update, setUpdate] = useState(false);\n    \n    const handleOpen = () => {\n        setOpen(true);\n        \n    }\n    const handleClose = () => setOpen(false);\n\n    const getMyCollections = async () => {\n        const mydatas = await dbService\n            .collection(\"collections\")\n            .where(\"creatorId\", \"==\", props.userObj.uid)\n            .get(); // uid를 creatorId로 줬었으니까.\n        setMyCollections(mydatas.docs.map(doc => doc.data()));\n    }\n\n    // 갤러리 정보를 수정\n    const getMyGallery = async () => {\n        const myGalleryData = await dbService\n            .collection(\"users\")\n            .where(\"userId\", \"==\", props.userObj.uid)\n            .get(); // uid를 creatorId로 줬었으니까.\n        let myGallery = myGalleryData.docs.map(doc => {return({...doc.data(), id:doc.id})})\n        setHasGallery(myGallery.length > 0);\n        setMyGallery(myGallery[0]);\n        if(myGallery.length > 0){\n            await getMyCollections();\n            setGalleryName(myGallery[0].galleryName);\n            setGalleryDesc(myGallery[0].desc);\n            setGalleryColor(myGallery[0].color);\n            setGalleryTypes(myGallery[0].typess);\n        }else{\n            setMyCollections([]);\n        }\n        setLoading(true);\n    }\n\n    useEffect(() => {\n        if(User === null){\n            alert(\"로그인 하셔야 합니다.\")\n        }\n        getMyGallery();\n    },[update])\n\n    const changeGalleryInto = async e => {\n        e.preventDefault();\n        if(props.userObj.displayName !== userName){\n            // 이러면 업데이트\n            await props.userObj.updateProfile({\n                displayName: userName,\n             });\n        }\n        await dbService.doc(`users/${myGallery.id}`)\n        .update({\n            color:galleryColor,\n            desc:galleryDesc,\n            galleryName:galleryName,\n            displayName:userName\n        })\n        alert(\"수정이 완료되었습니다!\")\n        handleClose();\n        setUpdate(!update);\n    }\n\n    const editOpen = () => {\n        setIsEditing(!isEditing);\n    }\n\n    if(hasGallery){\n        if(loading){\n            return (\n                <div>\n                    <CollectionList collections={myCollections} isEditing={isEditing}/>\n                    <Button onClick={handleOpen}>갤러리 수정하기</Button>\n                    { isEditing ? <Button onClick={editOpen} style={{backgroundColor:'blue'}}>완료하기</Button> : \n                    <Button onClick={editOpen} style={{backgroundColor:'red'}}>삭제하기</Button>}\n                    \n                    <div className=\"galleryInfo\">\n                        프로필 \n                        <p>\n                        유저 명 : {User.displayName}\n                        </p>\n                        <p>\n                        유저 이메일 : {User.email}\n                        </p>\n                        <p>\n                        갤러리 : {myGallery.galleryName}\n                        </p>\n                        <p>\n                        갤러리 설명 : {myGallery.desc}\n                        </p>\n                        <img src={User.photoURL} />\n                    </div>\n\n                    {/* 아래는 수정용 모달. */}\n                    <Modal\n                        open={open}\n                        onClose={handleClose}\n                        aria-labelledby=\"modal-modal-title\"\n                        aria-describedby=\"modal-modal-description\"\n                    >\n                    <form onSubmit={changeGalleryInto}>\n                        <Box sx={style}>\n                        <div className=\"update-body\">\n                            <p className=\"starbucks\">\n                            <span style={{fontSize:19}}>☕️</span> 5분을 선정해서 스타벅스 기프티콘을 드립니다.\n                            </p>\n                            <Typography id=\"modal-modal-title\" variant=\"h6\" component=\"h2\">\n                                이메일을 입력해주세요.\n                            </Typography>\n                            <input type=\"text\" placeholder=\"My Name\" value={userName} onChange={e => setUserName(e.target.value)}/>\n                            <input type=\"text\" placeholder=\"Gallery Name\" value={galleryName} onChange={e => setGalleryName(e.target.value)}/>\n                            <input type=\"text\" placeholder=\"갤러리 설명\" value={galleryDesc} onChange={e => setGalleryDesc(e.target.value)}/>\n                            <input type=\"color\" placeholder=\"갤러리 색\" value={galleryColor} onChange={e => setGalleryColor(e.target.value)}/>\n                        </div>\n                        <div style={{marginTop:10}}>\n                        <input type=\"submit\" style={{backgroundColor:'#47b9ff', marginLeft:10, color:'white', width:'20%'}}  value=\"확인\"/>\n                        <Button onClick={handleClose} style={{ marginLeft:10, color:'black', width:'10%'}}>\n                            닫기\n                        </Button>\n                        </div>\n                        </Box>\n                    </form>\n                    </Modal>\n                </div>\n            )\n        }else{\n            return(\n            <div>Loading...</div>\n            )\n        }\n    }else{\n        return(\n            <MakeGallery userObj={props.userObj}/>\n        )\n    }\n}\n\nexport default ProfilePage\n","import React, {useState} from 'react'\nimport './Sections/UploadPage.css'\nimport Button from '@material-ui/core/Button';\nimport { Input } from 'antd';\nimport { dbService } from '../../tools/fbase'\nimport { stService } from '../../tools/fbase'\nimport { v4 as uuidv4 } from 'uuid';\nimport Select from 'react-select'\nimport { typeSelect } from '../../tools/types'\n\nconst { TextArea } = Input;\n\n\nfunction UploadPage({userObj}) {\n    const [title, setTitle] = useState(\"\")\n    const [desc, setDesc] = useState(\"\")\n    const [attachment, setAttachment] = useState(\"\")\n    const [type, setType] = useState(\"all\")\n\n    const submit = async (e) => {\n        e.preventDefault();\n        console.log(\"Asdqw\");\n        if( title.length < 2 || desc.length < 2){\n            alert('3글자 이상 입력해주세요.')\n            return\n        } \n        // 사진을 먼저 업로드하고 그 URL을 받아서 데이터로 넣어줘야한다.\n        const attachmentRef = stService.ref().child(`${userObj.uid}/${uuidv4()}`)\n        const response = await attachmentRef.putString(attachment, \"data_url\");\n        const attachmentURL = await response.ref.getDownloadURL();\n        const collectionOne = {\n            title,\n            desc,\n            created:Date(),\n            creatorId:userObj.uid, // uid가 아이디를 뜻함.\n            attachmentURL:attachmentURL,\n            like_num:0,\n            comment_num:0,\n            type:type\n        };\n\n        await dbService.collection(\"collections\").add(collectionOne);\n\n        let gallery;\n        const dbGal = await dbService.collection(\"users\")\n        .where(\"userId\", \"==\", userObj.uid)\n        .get();\n        \n        gallery = dbGal.docs.map(doc => {return({...doc.data(), id:doc.id})})\n\n        await dbService.doc(`users/${gallery[0].id}`)\n        .update({collection_num : gallery[0].collection_num+1})\n\n        // uploadDataSave.push({\n        //     \"서비스 명\" : title,\n        //     \"설명 \" : desc,\n        //     \"이유\":reason,\n        // });\n        // localStorage.setItem(\"id\", title)\n        alert(\"컬렉션 등록이 완료되었습니다.\")\n        setTitle(\"\")\n        setDesc(\"\")\n        setAttachment(\"\")\n        return;\n    }\n\n    const onFileChange = (e) => {\n        const {target:{files},} = e;\n        const oneFile = files[0];\n        const reader = new FileReader();\n        reader.onloadend = (finishedEvent) => { // 로딩이 끝날 때 실행한다는 뜻.\n            const {currentTarget:{result}} = finishedEvent;\n            setAttachment(result);\n        }\n        reader.readAsDataURL(oneFile);\n    }\n\n    return (\n        <div className=\"uploadcontainer\">\n            <div className=\"uploadIncontainer\">\n                <form onSubmit={submit}>\n                    <p className=\"thanks\"> 내 컬렉션 등록하기 </p>\n                    <p className=\"add-thanks\">나만의 소중한 컬렉션을 남들과 공유해보세요</p>\n                    <p className=\"inputLabel\">제목</p>\n                    <input autoSize={{ minRows: 1, maxRows: 2 }} placeholder=\"이름\" className=\"nameInput\" value={title} onChange={(e) => {setTitle(e.currentTarget.value)}}></input>\n\n                    <p className=\"inputLabel\">컬렉션에 대한 나만의 설명을 적어주세요</p>\n                    <textarea \n                        className=\"nameInput\" \n                        value={desc} \n                        onChange={(e) => {setDesc(e.currentTarget.value)}}\n                        placeholder=\"설명을 작성해주세요\"\n                        style={{paddingTop:'10px'}}\n                    ></textarea>\n                    <div style={{marginTop:'10%'}}>\n                    <p className=\"inputLabel\" style={{fontSize:\"15px\"}}>컬렉션의 종류를 선택해주세요</p>\n                        <Select options={typeSelect} onChange={e => {setType(e.label); console.log(e.label)}} style={{color:'black'}}/>\n                    </div>\n\n                    <div style={{marginTop:'10%'}}>\n                    <input type=\"file\" accept=\"image/*\" className=\"file-input\" onChange={onFileChange}/>\n                    {attachment && \n                    <div>\n                        <img src={attachment} className=\"col-image\"/>\n                    </div>}\n                    </div>\n                    \n                    {/* <p className=\"inputLabel\">왜 남들에게 추천하고 싶으신가요?</p>\n                    <TextArea \n                        className=\"nameInput\" \n                        value={reason} \n                        onChange={(e) => {setReason(e.currentTarget.value)}}\n                        autoSize={{ minRows: 1, maxRows: 3 }}\n                        placeholder=\"Any reason\"\n                    ></TextArea> */}\n                    <div>\n                    <button className=\"inputButton\" onClick={submit}>등록하기</button>\n                    </div>\n                </form>\n            </div>\n        </div>\n    )\n}\n\nexport default UploadPage\n","import React, {useState} from 'react'\nimport './Sections/UploadPage.css'\nimport Button from '@material-ui/core/Button';\nimport { Input } from 'antd';\nimport { dbService } from '../../tools/fbase'\nimport { stService } from '../../tools/fbase'\nimport { v4 as uuidv4 } from 'uuid';\nimport Select from 'react-select'\nimport {types} from '../../tools/types'\nimport {typeSelect} from '../../tools/types'\n\nconst InformationUpload = ({userObj}) =>  {\n    const [title, setTitle] = useState(\"\")\n    const [desc, setDesc] = useState(\"\")\n    const [type, setType] = useState(\"\")\n\n    const submit = async (e) => {\n        e.preventDefault();\n\n        if( title.length < 3 || desc.length < 3){\n            alert('3글자 이상 입력해주세요.')\n            return\n        } \n\n        // 사진을 먼저 업로드하고 그 URL을 받아서 데이터로 넣어줘야한다.\n        const InformationOne = {\n            title,\n            desc,\n            created:Date(),\n            creatorId:userObj.uid, // uid가 아이디를 뜻함.\n            like_num:0,\n            comment_num:0,\n            displayName:userObj.displayName,\n            type:type\n        };\n\n        await dbService.collection(\"informations\").add(InformationOne);\n        \n        alert(\"질문 등록이 완료되었습니다.\")\n        setTitle(\"\")\n        setDesc(\"\")\n        return;\n    }\n\n    return (\n        <div className=\"uploadcontainer\">\n            <div className=\"uploadIncontainer\">\n                <form onSubmit={submit}>\n                    <p className=\"thanks\"> 내 컬렉션 등록하기 </p>\n                    <p className=\"add-thanks\">나만의 소중한 컬렉션을 남들과 공유해보세요</p>\n                    <p className=\"inputLabel\">제목</p>\n                    <input autoSize={{ minRows: 1, maxRows: 2 }} placeholder=\"이름\" className=\"nameInput\" value={title} onChange={(e) => {setTitle(e.currentTarget.value)}}></input>\n\n                    <p className=\"inputLabel\">컬렉션에 대한 나만의 설명을 적어주세요</p>\n                    <textarea \n                        className=\"nameInput\" \n                        value={desc} \n                        onChange={(e) => {setDesc(e.currentTarget.value)}}\n                        placeholder=\"설명을 작성해주세요\"\n                        style={{paddingTop:'10px'}}\n                    ></textarea>\n                    <div style={{marginTop:'5%'}}>\n                    <p className=\"inputLabel\" style={{fontSize:\"15px\"}}>컬렉션의 종류를 선택해주세요</p>\n                        <Select options={typeSelect} onChange={e => {setType(e.label); console.log(e.label)}} style={{color:'black'}}/>\n                    </div>\n\n                    <div>\n                    <button className=\"inputButton\" onClick={submit}>등록하기</button>\n                    </div>\n                </form>\n            </div>\n        </div>\n    )\n}\n\nexport default InformationUpload\n","import React, {useState} from 'react'\nimport './Sections/UploadPage.css'\nimport Button from '@material-ui/core/Button';\nimport { Input } from 'antd';\nimport { dbService } from '../../tools/fbase'\nimport { stService } from '../../tools/fbase'\nimport { v4 as uuidv4 } from 'uuid';\nimport Select from 'react-select'\nimport {typeSelect} from '../../tools/types'\n\nconst categories = [\n    {value:\"buy\", label:\"📦 구매\"}, \n    {value:\"sell\", label:\"💰 판매\"}, \n    {value:\"keep\", label:\"🧺 보관\"}, \n    {value:\"real\", label:\"🤦🏻‍♂️ 정품\"}, \n    {value:\"foriegn\", label:\"🛩 해외거래\"}, \n    {value:\"etc\", label:\"🥪 기타정보\"}\n]\n\nconst QnAUpload = ({userObj}) =>  {\n    const [title, setTitle] = useState(\"\")\n    const [desc, setDesc] = useState(\"\")\n    const [type, setType] = useState(\"\")\n    const [category, setCategory] = useState(\"\")\n\n    const submit = async (e) => {\n        e.preventDefault();\n\n        if( title.length < 3 || desc.length < 3){\n            alert('3글자 이상 입력해주세요.')\n            return\n        } \n\n        // 사진을 먼저 업로드하고 그 URL을 받아서 데이터로 넣어줘야한다.\n        const QnAOne = {\n            title,\n            desc,\n            created:Date(),\n            creatorId:userObj.uid, // uid가 아이디를 뜻함.\n            like_num:0,\n            comment_num:0,\n            displayName:userObj.displayName,\n            type:type,\n            category:category,\n        };\n\n        await dbService.collection(\"qnas\").add(QnAOne);\n        \n        alert(\"질문 등록이 완료되었습니다.\")\n        setTitle(\"\")\n        setDesc(\"\")\n        return;\n    }\n\n    return (\n        <div className=\"uploadcontainer\">\n            <div className=\"uploadIncontainer\">\n                <form onSubmit={submit}>\n                    <p className=\"thanks\"> 질문하기 </p>\n                    <p className=\"add-thanks\">어디서도 찾기힘든 정보를 질문하세요</p>\n                    <p className=\"inputLabel\">제목</p>\n                    <input autoSize={{ minRows: 1, maxRows: 2 }} placeholder=\"이름\" className=\"nameInput1\" value={title} onChange={(e) => {setTitle(e.currentTarget.value)}}></input>\n\n                    <p className=\"inputLabel\">컬렉션에 대한 나만의 설명을 적어주세요</p>\n                    <textarea \n                        className=\"nameInput\" \n                        value={desc} \n                        onChange={(e) => {setDesc(e.currentTarget.value)}}\n                        placeholder=\"설명을 작성해주세요\"\n                        style={{paddingTop:'10px'}}\n                    ></textarea>\n                    <div className=\"selections\">\n                        <div style={{width: '49%', marginTop:'-10px'}}>\n                            <p className=\"input-label-select\" style={{fontSize:\"15px\"}}>컬렉션의 종류를 선택해주세요</p>\n                            <Select options={typeSelect} onChange={e => {setType(e.label); console.log(e.label)}} style={{color:'black'}}/>\n                        </div>                  \n                        <div style={{width: '49%', marginTop:'-10px', marginLeft:'1%'}}>\n                            <p className=\"input-label-select\" style={{fontSize:\"15px\"}}>질문의 종류를 선택해주세요</p>\n                            <Select options={categories} onChange={e => {setCategory(e.label); console.log(e.label)}} style={{color:'black'}}/>\n                        </div>\n                    </div>\n\n                    <div>\n                    <button className=\"inputButton\" onClick={submit}>등록하기</button>\n                    </div>\n                </form>\n            </div>\n        </div>\n    )\n}\n\nexport default QnAUpload\n","import React, {useState, useEffect} from 'react'\nimport './Sections/QnAPage.css'\nimport Button from '@mui/material/Button';\nimport {Input} from 'antd'\nimport { dbService } from '../../tools/fbase';\nimport {authService} from '../../tools/fbase';\nimport CommentContainer from '../../tools/CommentContainer';\n\nconst QnAPage = (props) => {\n    const User = authService.currentUser;\n    const [update, setUpdate] = useState(false);\n    const [qna, setQna] = useState({});\n    const [info, setInfo] = useState({});\n    const [loading, setLoading] = useState(false);\n\n    const getThisQnA = async () => {\n        const dbqna = await dbService\n        .collection(\"qnas\")\n        .doc(props.match.params.id)\n        .get()\n        .then(snapshot => setQna({...snapshot.data(), id:snapshot.id}))\n        setLoading(true);\n        //     // set이 붙는 함수를 쓸 때 값이 아니라 함수를 전달할 수 있다.\n    }\n\n    const getThisQnaInfo = async () => {\n        if(loading){\n            const dbinfos = await dbService.collection(\"users\")\n            .where(\"userId\", \"==\", qna.creatorId)\n            .get();\n\n            let dbinfo = dbinfos.docs.map(doc => {return({...doc.data(), id:doc.id})})\n            setInfo(dbinfo[0]);\n        }\n    }\n\n    useEffect(() => {\n        getThisQnA();\n        getThisQnaInfo();\n    },[update, loading])\n\n    return (\n        <div className=\"QnAContainer\">\n            <div className=\"QnAInfo\">\n                <div className=\"top-container\">\n                    <span className=\"qna\">QnA</span>\n                    <span className=\"ask\">\n                        <div style={{paddingLeft:'2%'}}>\n                            <span style={{fontSize:'13px', color:'rgb(255,255,255,0.8)'}}>무엇이 궁금한가요?</span>\n                        </div>\n                        <div>\n                            <span style={{fontSize:'14px', marginLeft:'4%'}}>{qna.type}</span><span style={{marginLeft:'0px', color:'rgb(255,255,255,0.8)', fontSize:'13px'}}>에 관한 질문</span>\n                            <span style={{fontSize:'14px', marginLeft:'1%'}}>{qna.category}</span><span style={{marginLeft:'0px', color:'rgb(255,255,255,0.8)', fontSize:'13px'}}>가 궁금해요</span>\n                        </div>\n                    </span>\n                </div>\n                <div className=\"title-container\">\n                    <div className=\"box-title\">질문 제목</div>\n                    <div className=\"box-body\">{qna.title}</div>\n                </div>\n                <div className=\"desc-container\">\n                    <div className=\"box-title\">질문 내용</div>\n                    <div className=\"box-body\">{qna.desc}</div>\n                </div>\n                <div className=\"info-container\">\n                    <span className=\"galleryName\">{info.galleryName}</span>\n                    <span className=\"displayName\">{info.displayName} 님의 질문</span>\n                </div>\n            </div>\n            {/* 댓글을 달고 보여주는 공간 */}\n            {/* <div style={{width:'100%'}}> */}\n                { loading && <CommentContainer category=\"qna_comments\" contentId={qna.id} userId={qna.userId} contentLikeNum={qna.comment_num} />}\n            {/* </div> */}\n        </div>\n    )\n}\n\nexport default QnAPage\n","import React from 'react'\nimport {useState} from 'react'\nimport { Card, Row, Col, Image } from \"antd\";\n\nconst infos = [\n    {\n        title:'제목'\n    }\n]\n\nconst InformationPage = () => {\n\n    const informationTable = () => {\n\n\n    }\n    return (\n        <div className=\"InformationContainer\">\n            <p>꿀정보 🍯</p>\n                <Row gutter={32, 16} style={{display:'inline-flex', textAlign:'center',justifyContent:'center', alignItems:'center', width:'100%', marginTop:'0%'}}>\n                    {informationTable}\n                </Row>\n        </div>\n    )\n}\n\nexport default InformationPage\n","import React, {useState, useEffect} from 'react'\nimport {useHistory} from 'react-router-dom'\nimport './Sections/CollectionPage.css'\nimport CommentContainer from '../../tools/CommentContainer'\nimport {dbService} from '../../tools/fbase'\nimport Button from '@mui/material/Button';\nimport {authService} from '../../tools/fbase';\nimport {types} from '../../tools/types'\nimport { Link } from 'react-router-dom'\nimport * as FaIcons from 'react-icons/fa';\n\nconst CollectionPage = (props) => {\n    // const history = useHistory();\n    const [item, setItem] = useState({});\n    const [loading, setLoading] = useState(false);\n    const [update, setUpdate] = useState(false);\n    const User = authService.currentUser;\n\n    const getThisCollection = async () => {\n        let dbcol;\n        const dbCollection = await dbService\n            .collection(\"collections\")\n            .doc(props.match.params.id)\n            .get()\n            .then(snapshot => dbcol = {...snapshot.data(), id:snapshot.id})\n        const dbgallery = await dbService\n            .collection(\"users\")\n            .where(\"userId\", \"==\", dbcol.creatorId)\n            .get()\n        let dbgal = dbgallery.docs.map(doc => {return({...doc.data(), gal_id:doc.id})})\n        setItem({...dbcol, galId:dbgal[0].gal_id, galleryName:dbgal[0].galleryName, displayName:dbgal[0].displayName})\n        setLoading(true);\n        //     // set이 붙는 함수를 쓸 때 값이 아니라 함수를 전달할 수 있다.\n    }\n\n    useEffect(() => {\n        getThisCollection();\n    },[update])\n\n    const addLike = async () => {\n        // 좋아요를 누른 적 있는지 체크해야한다.\n        const dbLike = await dbService\n            .collection(\"collections_like\")\n            .where(\"creatorId\", \"==\", User.uid)\n            .where(\"collectionId\", \"==\", item.id)\n            .get();\n        const db_like = dbLike.docs.map(doc => {return({...doc.data(), id:doc.id})});\n        console.log(\"dbLike\", db_like)\n\n        if(db_like.length === 0){\n            const likeOne = {\n                creatorId: User.uid,\n                collectionId: item.id\n            }\n            await dbService.collection(\"collections_like\").add(likeOne)\n\n            await dbService.doc(`collections/${item.id}`).update({\n                like_num:item.like_num + 1,\n            });\n            alert(\"I like it!\");\n            setUpdate(!update);\n        }else{\n            alert(\"이미 좋아요를 눌렀습니다.\")\n        }\n    }\n\n    return (\n        <div className=\"one-collection-container\">\n            <div className=\"one-collection-body\">\n                <div className=\"collection-top\">\n                    <div className=\"gallery-name\">\n                        <Link to={{\n                            pathname:`/gallery/${item.galId}`\n                        }} className=\"gallery-link\">{item.galleryName} ↗</Link>\n                    </div>\n                    <div className=\"collection-title-top\">\n                        <span className=\"collection-title\">{item.title}</span>\n                        <div style={{width:'20%', display:'flex', justifyContent:'end', paddingRight:'2%'}}>\n                            <span className=\"type-one\">{item.type}</span>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"image-container\">\n                    <img src={item.attachmentURL} className=\"image\" />\n                </div>\n                <div className=\"colection-desc\">\n                    <span className=\"desc-head\">설명</span>\n                    <span className=\"desc-body\">{item.desc}</span>\n                    <span className=\"like-container\">\n                        <div className=\"left-like-container\">\n                            <span className=\"more-button\">갤러리의 다른 컬렉션 둘러보기</span>\n                        </div>\n                        <span onClick={addLike} className=\"collection-like-button\">\n                            <FaIcons.FaRegHeart color=\"white\" size=\"30px\"/>\n                            <span className=\"like-desc\">{item.like_num}</span>\n                        </span>\n                    </span>\n                </div>\n            </div>\n            { loading && <CommentContainer category=\"c_comments\" contentId={item.id} contentLikeNum={item.comment_num}/> }\n        </div>\n    )\n}\n\nexport default CollectionPage\n","import React, {useState, useEffect} from 'react'\nimport { dbService } from '../../tools/fbase';\nimport {authService} from '../../tools/fbase';\nimport './Sections/LiksPage.css'\nimport {Link} from 'react-router-dom'\n\nconst LikePage = () => {\n    const [clikes, setClikes] = useState([])\n    const [glikes, setGlikes] = useState([])\n    const [qclikes, setQclikes] = useState([])\n    const [loading, setLoading] = useState(true)\n    const User = authService.currentUser;\n\n    const getCollectionLikes = async () => {\n        const dbCollection = await dbService.collection(\"collections_like\")\n        .where(\"creatorId\", \"==\", User.uid)\n        .get();\n\n        let clikeList = dbCollection.docs.map(doc => {return({...doc.data(), id:doc.id})})\n        clikeList.map(async (item, index) => {\n            await dbService.collection(\"collections\")\n            .doc(item.collectionId)\n            .get()\n            .then(snapshot => {setClikes([...clikes, {...snapshot.data(), id:snapshot.id}])})\n        })\n    }\n    const getGalleryLikes = async () => {\n        const dbGallery = await dbService.collection(\"users_like\")\n        .where(\"creatorId\", \"==\", User.uid)\n        .get();\n\n        let glikeList = dbGallery.docs.map(doc => {return({...doc.data(), id:doc.id})});\n\n        glikeList.map(async (item, index) => {\n            await dbService.collection(\"users\")\n            .doc(item.galleryId)\n            .get()\n            .then(snapshot => {setGlikes([...glikes, {...snapshot.data(), id:snapshot.id}])})\n        })\n    }\n    const getQnaCommentLikes = async () => {\n        const dbQna = await dbService.collection(\"qna_comments_like\")\n        .where(\"creatorId\", \"==\", User.uid)\n        .get();\n\n        setQclikes(dbQna.docs.map(doc => {return({...doc.data(), id:doc.id})}));\n        setLoading(false);\n    }\n\n    useEffect(() => {\n        setGlikes([]);\n        setClikes([]);\n        getCollectionLikes();\n        getGalleryLikes();\n        getQnaCommentLikes();\n    },[loading])\n\n    const glikesTable = glikes.map((item, index) => {\n\n        return(\n            <Link to={{\n                pathname:`gallery/${item.id}`\n            }}  key={index} className=\"gallery-like-one\">\n                <span className=\"gallery_owner\"><span className=\"gangjo\">{item.displayName}</span>님의 갤러리</span>\n                <span className=\"likes-gallery-name\">{item.galleryName}\n                </span>\n                <div className=\"gallery-info\">\n                    <span><span className=\"gangjo\">{item.collection_num}</span> 개의 컬렉션 | </span>\n                    <span><span className=\"gangjo\">{item.like_num}</span> 개의 좋아요</span>\n                </div>\n            </Link>\n        )\n    })\n    const clikesTable = clikes.map((item, index) => {\n        return(\n            <Link to={{\n                pathname:`CollectionPage/${item.id}`\n            }}  key={index} className=\"gallery-like-one\">\n                {/* <span className=\"gallery_owner\"><span className=\"gangjo\">{item.displayName}</span>님의 갤러리</span> */}\n                <span className=\"likes-gallery-name\">\n                    {item.title}\n                </span>\n                <span className=\"likes-type\">{item.type}</span>\n                <div className=\"gallery-info\">\n                    <span><span className=\"gangjo\">{item.comment_num}</span> 개의 댓글 | </span>\n                    <span><span className=\"gangjo\">{item.like_num}</span> 개의 좋아요</span>\n                </div>\n            </Link>\n        )\n    })\n\n    return (\n        <div className=\"my-like-container\">\n            <div className=\"my-like-back\">\n                <div className=\"like-title\">\n                    <p>\n                        좋아요한 것들 목록이 쭉 나온다.\n                    </p>\n                </div>\n                <div style={{width:'80%'}}>\n                    <p className=\"info-title\">갤러리 좋아요 한 것들</p>\n                    {!loading && <>\n                        {glikesTable}\n                    </>}\n                </div>\n                <div style={{width:'80%'}}>\n                    <p className=\"info-title\">컬렉션 좋아요 한 것들</p>\n                    {!loading && <>\n                        {clikesTable}\n                    </>}\n                </div>\n                <div style={{width:'80%'}}>\n                    <p className=\"info-title\">QnA 답변에 좋아요 한 것들</p>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default LikePage\n","import React from 'react'\nimport {useState, useEffect} from 'react'\nimport { Link } from 'react-router-dom';\nimport * as FaIcons from 'react-icons/fa';\nimport { dbService } from '../../tools/fbase';\nimport CollectionCard from '../LandingPage/Sections/CollectionCard'\nimport { types } from '../../tools/types'\nimport Button from '@mui/material/Button';\nimport {firebaseInstance, authService, GoogleAuthProvider} from '../../tools/fbase';\nimport './All.css'\n\nfunction AllCollections() {\n    const [collections, setCollections] = useState([]);\n    const [type, setType] = useState(\"전체\");\n    const [loading, setLoading] = useState(false);\n\n    const getRealAllCollections = async () => {\n        const collectionDatas = await dbService\n            .collection(\"collections\")\n            .orderBy(\"like_num\", \"desc\")\n            .get(); // uid를 creatorId로 줬었으니까.\n        let collectionData = collectionDatas.docs.map(doc => {\n            return({...doc.data(), id:doc.id})\n        });\n        if(type===\"전체\"){\n            setCollections(collectionData);\n        }else{\n            collectionData = collectionData.filter(item => item.type === type|| item.type === \"전체\")\n            setCollections(collectionData);\n        }\n        setLoading(true);\n    }\n\n    const collectionTable = collections.map((item, index) => {\n        return(\n            <CollectionCard item={item} key={index}/>\n        )\n    })\n\n    const typeTable = types.map((item, index) => {\n        let backColor = \"#060b26\"\n        if(item === type){\n            backColor = \"#ff0000\"\n        }\n        return(\n            <div className=\"typeOne\" key={index} style={{backgroundColor: `${backColor}`}}>\n                <Button onClick={() => {setType(item);}} style={{color:'white', fontSize:'12px'}}>{item}</Button>\n            </div>\n        )\n    })\n\n    useEffect(() => {\n        getRealAllCollections();\n    },[type])\n\n\n    if(loading){\n        return (\n            <div className=\"landingcontainer\">\n            <div className=\"all-table-title\">\n                    <span>전체 컬렉션들 입니다</span>\n            </div>\n\n            <div className=\"type-title\" style={{backgroundColor:'rgba(0,0,0,0)', color:'#060b26', marginTop:'1%'}}>\n                원하는 카테고리를 골라보세요.\n            </div>\n            <div className=\"type-table23\" style={{backgroundColor:'rgba(0,0,0,0)'}}>\n                {typeTable}\n            </div>\n\n\n            <div className=\"qna-table-container\">\n                <div className=\"landing-qna-table\">\n                    {collectionTable}\n                </div>\n            </div>\n\n        </div>\n        )\n    }else{\n        return(\n        <div>\n            로딩중..\n        </div>\n        )\n    }\n}\n\nexport default AllCollections\n","import React, {useState} from 'react';\nimport {HashRouter as Router, Route, Switch} from \"react-router-dom\";\nimport './App.css';\nimport Auth from '../routes/Auth';\nimport Home from '../routes/Home';\nimport LandingPage from './views/LandingPage/LandingPage';\nimport GalleryPage from './views/GalleryPage/GalleryPage';\nimport ProfilePage from './views/ProfilePage/ProfilePage';\nimport UploadPage from './views/UploadPage/UploadPage';\nimport NavBar from './views/NavBar/NavBar';\nimport InformationUpload from './views/UploadPage/InformationUpload'\nimport QnAUpload from './views/UploadPage/QnAUpload'\nimport QnAPage from './views/InformationPage/QnAPage'\nimport InformationPage from './views/InformationPage/InformationPage'\nimport CollectionPage from './views/CollectionPage/CollectionPage'\nimport LikePage from './views/LikePage/LikePage'\nimport AllCollections from './views/AllPages/AllCollections'\nimport AllGalleries from './views/AllPages/AllGalleries'\nimport AllQnAs from './views/AllPages/AllQnAs'\nimport { createBrowserHistory } from 'history';\nconst history = createBrowserHistory();\n\nconst AppRouter = ({isLoggedIn, userObj}) => {\nreturn(\n    <Router history={history}>\n        <Switch>\n            <>\n            <NavBar isLoggedIn={isLoggedIn} userObj={userObj}/>\n            <div className=\"Container\" style={{ minHeight: 'calc(100vh - 80px)', zIndex:-1 }}>\n                <Route exact path=\"/\">\n                    <LandingPage isLoggedIn={isLoggedIn} userObj={userObj}/>\n                </Route>\n                <Route exact path=\"/profile\">\n                    <ProfilePage userObj={userObj}/>\n                </Route>\n                <Route exact path=\"/upload\">\n                    <UploadPage userObj={userObj}/>\n                </Route>\n                <Route exact path=\"/uploadQnA\">\n                    <QnAUpload userObj={userObj}/>\n                </Route>\n                <Route exact path=\"/uploadInformation\">\n                    <InformationUpload userObj={userObj}/>\n                </Route>\n                <Route exact path=\"/gallery/:id\" component={ GalleryPage } />\n                <Route exact path=\"/QnAPage/:id\" component={QnAPage} />\n                \n                <Route exact path=\"/InformationPage\">\n                    <InformationPage />\n                </Route>\n                <Route exact path=\"/CollectionPage/:id\" component={ CollectionPage } />\n                <Route excct path=\"/mylikes\" component={LikePage} />\n                <Route exact path=\"/allcollections\">\n                    <AllCollections />\n                </Route>\n                <Route exact path=\"/allgalleries\">\n                    <AllGalleries />\n                </Route>\n                <Route exact path=\"/allqnas\">\n                    <AllQnAs />\n                </Route>\n            </div>\n            {/* <Footer /> */}\n            </> \n        </Switch>\n    </Router>\n)\n}\nexport default AppRouter;","import React, {useState, useEffect} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {HashRouter as Router, Route} from \"react-router-dom\";\nimport LandingPage from './views/LandingPage/LandingPage';\nimport GalleryPage from './views/GalleryPage/GalleryPage';\nimport NavBar from './views/NavBar/NavBar';\nimport AppRouter from './Router';\nimport {app, authService} from './tools/fbase';\nimport * as AiIcons from 'react-icons/ai';\n\nfunction App() {\n  console.log(\"auth\", authService.currentUser ) //User 또는 null을 반환한다. 공식문서 잘 읽어서 쓰기! 로그인 여부 파악에 사용.\n  const [init, setInit] = useState(false);\n  // firebase가 유저를 읽어오기까지 기다려야 한다.\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [userObj, setUserObj] = useState(null);\n\n  useEffect(() => {\n    //Add observers for changes to the user's sign-in state.\n    authService.onAuthStateChanged((user) => {\n      if(user){\n        setIsLoggedIn(true);\n        setUserObj(user);\n      }else{\n        setIsLoggedIn(false);\n        setUserObj(user);\n      }\n      setInit(true);\n    });\n  }, [])\n  \n  return (\n    <>\n    {init ? <AppRouter isLoggedIn={isLoggedIn} userObj={userObj}/> : \"Initializing...\"}\n    <footer className=\"footer\">\n      <div className=\"footer-item\">\n        <a href=\"https://www.instagram.com/soozip_ga/\" className=\"insta\"><AiIcons.AiOutlineInstagram/> Instagram</a>\n        <a href=\"https://www.instagram.com/soozip_ga/\" className=\"insta\" style={{marginLeft:'3%'}}>문의하기</a>\n      </div>\n      <div className=\"footer-item\">&copyright by soozip {new Date().getFullYear()}</div>\n      </footer>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}